const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º access token –∏–∑ —Ñ–∞–π–ª–∞
const tokenFile = path.join(__dirname, '..', 'test-token.txt');
let accessToken = '';

if (fs.existsSync(tokenFile)) {
  accessToken = fs.readFileSync(tokenFile, 'utf8').trim();
  console.log('‚úÖ Access token –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞');
} else {
  console.error('‚ùå –§–∞–π–ª test-token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test-token.txt –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à access token');
  process.exit(1);
}

const API_URL = 'https://cashcraft-backend-production.up.railway.app';

async function testReentryFix() {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.log('üìä 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
    const downloadResponse1 = await fetch(`${API_URL}/api/v1/sync/download`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å download:', downloadResponse1.status, downloadResponse1.statusText);
    
    if (downloadResponse1.ok) {
      const data1 = await downloadResponse1.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:');
      console.log('  - –°—á–µ—Ç–∞:', Array.isArray(data1.accounts) ? data1.accounts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', Array.isArray(data1.transactions) ? data1.transactions.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', Array.isArray(data1.categories) ? data1.categories.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –î–æ–ª–≥–∏:', Array.isArray(data1.debts) ? data1.debts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - lastSyncAt:', data1.lastSyncAt);
      
      // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–µ)
      console.log('\nüì§ 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–µ)...');
      const uploadResponse = await fetch(`${API_URL}/api/v1/sync/upload`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          data: {
            accounts: [],
            categories: [],
            transactions: [],
            debts: [],
            exchangeRates: []
          }
        })
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å upload (–ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ):', uploadResponse.status, uploadResponse.statusText);
      
      if (uploadResponse.ok) {
        const uploadResult = await uploadResponse.json();
        console.log('‚úÖ Upload –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω:', uploadResult);
      } else {
        const errorText = await uploadResponse.text();
        console.error('‚ùå Upload –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞:', errorText);
      }
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å...');
      const downloadResponse2 = await fetch(`${API_URL}/api/v1/sync/download`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å download (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π):', downloadResponse2.status, downloadResponse2.statusText);
      
      if (downloadResponse2.ok) {
        const data2 = await downloadResponse2.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—Å–ª–µ upload –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
        console.log('  - –°—á–µ—Ç–∞:', Array.isArray(data2.accounts) ? data2.accounts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', Array.isArray(data2.transactions) ? data2.transactions.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', Array.isArray(data2.categories) ? data2.categories.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –î–æ–ª–≥–∏:', Array.isArray(data2.debts) ? data2.debts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - lastSyncAt:', data2.lastSyncAt);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        const accountsSame = Array.isArray(data1.accounts) && Array.isArray(data2.accounts) && 
                            data1.accounts.length === data2.accounts.length;
        const transactionsSame = Array.isArray(data1.transactions) && Array.isArray(data2.transactions) && 
                                data1.transactions.length === data2.transactions.length;
        const categoriesSame = Array.isArray(data1.categories) && Array.isArray(data2.categories) && 
                              data1.categories.length === data2.categories.length;
        const debtsSame = Array.isArray(data1.debts) && Array.isArray(data2.debts) && 
                         data1.debts.length === data2.debts.length;
        
        if (accountsSame && transactionsSame && categoriesSame && debtsSame) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - —Å–µ—Ä–≤–µ—Ä –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        } else {
          console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞—â–∏—Ç–æ–π');
        }
      } else {
        const errorText = await downloadResponse2.text();
        console.error('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π download –æ—à–∏–±–∫–∞:', errorText);
      }
      
    } else {
      const errorText = await downloadResponse1.text();
      console.error('‚ùå –ü–µ—Ä–≤—ã–π download –æ—à–∏–±–∫–∞:', errorText);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:');
    console.log('   1. –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç - —Å–Ω–∞—á–∞–ª–∞ download, –ø–æ—Ç–æ–º upload');
    console.log('   2. –ü—Ä–∏ –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ - —Å–Ω–∞—á–∞–ª–∞ upload, –ø–æ—Ç–æ–º download');
    console.log('   3. –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

testReentryFix(); 