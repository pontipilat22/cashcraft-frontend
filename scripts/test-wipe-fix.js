const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º access token –∏–∑ —Ñ–∞–π–ª–∞
const tokenFile = path.join(__dirname, '..', 'test-token.txt');
let accessToken = '';

if (fs.existsSync(tokenFile)) {
  accessToken = fs.readFileSync(tokenFile, 'utf8').trim();
  console.log('‚úÖ Access token –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞');
} else {
  console.error('‚ùå –§–∞–π–ª test-token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test-token.txt –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à access token');
  process.exit(1);
}

const API_URL = 'https://cashcraft-backend-production.up.railway.app';

async function testWipeFix() {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ wipeData...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.log('üìä 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
    const downloadResponse1 = await fetch(`${API_URL}/api/v1/sync/download`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å download:', downloadResponse1.status, downloadResponse1.statusText);
    
    if (downloadResponse1.ok) {
      const data1 = await downloadResponse1.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:');
      console.log('  - –°—á–µ—Ç–∞:', Array.isArray(data1.accounts) ? data1.accounts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', Array.isArray(data1.transactions) ? data1.transactions.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', Array.isArray(data1.categories) ? data1.categories.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –î–æ–ª–≥–∏:', Array.isArray(data1.debts) ? data1.debts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      
      // 2. –í—ã–ø–æ–ª–Ω—è–µ–º wipe (—Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö)
      console.log('\nüóëÔ∏è 2. –í—ã–ø–æ–ª–Ω—è–µ–º wipe (—Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö)...');
      const wipeResponse = await fetch(`${API_URL}/api/v1/sync/wipe`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å wipe:', wipeResponse.status, wipeResponse.statusText);
      
      if (wipeResponse.ok) {
        console.log('‚úÖ Wipe —É—Å–ø–µ—à–µ–Ω');
      } else {
        const errorText = await wipeResponse.text();
        console.error('‚ùå Wipe –æ—à–∏–±–∫–∞:', errorText);
        return;
      }
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—á–∏—â–µ–Ω—ã
      console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—á–∏—â–µ–Ω—ã...');
      const downloadResponse2 = await fetch(`${API_URL}/api/v1/sync/download`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å download –ø–æ—Å–ª–µ wipe:', downloadResponse2.status, downloadResponse2.statusText);
      
      if (downloadResponse2.ok) {
        const data2 = await downloadResponse2.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—Å–ª–µ wipe:');
        console.log('  - –°—á–µ—Ç–∞:', Array.isArray(data2.accounts) ? data2.accounts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', Array.isArray(data2.transactions) ? data2.transactions.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', Array.isArray(data2.categories) ? data2.categories.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –î–æ–ª–≥–∏:', Array.isArray(data2.debts) ? data2.debts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω—ã
        const isCleared = (data2.accounts?.length || 0) === 0 && 
                         (data2.transactions?.length || 0) === 0 && 
                         (data2.categories?.length || 0) === 0 && 
                         (data2.debts?.length || 0) === 0;
        
        if (isCleared) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã');
        } else {
          console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã');
        }
      } else {
        const errorText = await downloadResponse2.text();
        console.error('‚ùå Download –ø–æ—Å–ª–µ wipe –æ—à–∏–±–∫–∞:', errorText);
      }
      
      // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–∞–∑–æ–≤—ã–º–∏)
      console.log('\nüì§ 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)...');
      const uploadResponse = await fetch(`${API_URL}/api/v1/sync/upload`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          data: {
            accounts: [
              {
                id: 'cash-account',
                name: '–ù–∞–ª–∏—á–Ω—ã–µ',
                type: 'cash',
                balance: 0,
                currency: 'USD',
                isDefault: true,
                isIncludedInTotal: true
              }
            ],
            categories: [
              {
                id: 'food-category',
                name: '–ï–¥–∞',
                type: 'expense',
                icon: 'restaurant',
                color: '#FF6B6B'
              }
            ],
            transactions: [],
            debts: [],
            exchangeRates: []
          }
        })
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å upload (–±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ):', uploadResponse.status, uploadResponse.statusText);
      
      if (uploadResponse.ok) {
        const uploadResult = await uploadResponse.json();
        console.log('‚úÖ Upload –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω:', uploadResult);
      } else {
        const errorText = await uploadResponse.text();
        console.error('‚ùå Upload –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞:', errorText);
      }
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('\nüìä 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      const downloadResponse3 = await fetch(`${API_URL}/api/v1/sync/download`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å download (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π):', downloadResponse3.status, downloadResponse3.statusText);
      
      if (downloadResponse3.ok) {
        const data3 = await downloadResponse3.json();
        console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:');
        console.log('  - –°—á–µ—Ç–∞:', Array.isArray(data3.accounts) ? data3.accounts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', Array.isArray(data3.transactions) ? data3.transactions.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', Array.isArray(data3.categories) ? data3.categories.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
        console.log('  - –î–æ–ª–≥–∏:', Array.isArray(data3.debts) ? data3.debts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      } else {
        const errorText = await downloadResponse3.text();
        console.error('‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π download –æ—à–∏–±–∫–∞:', errorText);
      }
      
    } else {
      const errorText = await downloadResponse1.text();
      console.error('‚ùå –ü–µ—Ä–≤—ã–π download –æ—à–∏–±–∫–∞:', errorText);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è wipeData –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:');
    console.log('   1. –ü–æ—Å–ª–µ wipe - –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    console.log('   2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ñ–ª–∞–≥ dataReset - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è');
    console.log('   3. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—Ö–æ–¥–µ - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø—É—Å—Ç—ã–µ)');
    console.log('   4. –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

testWipeFix(); 