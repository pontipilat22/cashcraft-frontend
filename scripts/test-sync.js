import AsyncStorage from '@react-native-async-storage/async-storage';
const fs = require('fs');
const path = require('path');

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
const testSync = async () => {
  try {
    console.log('üß™ [TestSync] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const token = await AsyncStorage.getItem('@cashcraft_access_token');
    console.log('üîë [TestSync] –¢–æ–∫–µ–Ω:', token ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º userId
    const userId = await AsyncStorage.getItem('@cashcraft_user_id');
    console.log('üë§ [TestSync] User ID:', userId || '–ù–µ –Ω–∞–π–¥–µ–Ω');
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const lastSyncTime = await AsyncStorage.getItem('@cashcraft_last_sync_time');
    console.log('‚è∞ [TestSync] –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:', lastSyncTime || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    const resetFlag = userId ? await AsyncStorage.getItem(`dataReset_${userId}`) : null;
    console.log('üè∑Ô∏è [TestSync] –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:', resetFlag || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    const fallbackData = await AsyncStorage.getItem('fallback_cloud_data');
    console.log('üíæ [TestSync] Fallback –¥–∞–Ω–Ω—ã–µ:', fallbackData ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { WatermelonDatabaseService } = await import('../src/services/watermelonDatabase');
    const isDatabaseReady = WatermelonDatabaseService.isDatabaseReady();
    console.log('üóÑÔ∏è [TestSync] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞:', isDatabaseReady);
    
    if (isDatabaseReady) {
      // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const unsyncedData = await WatermelonDatabaseService.getUnsyncedData();
      console.log('üìä [TestSync] –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        accounts: unsyncedData.accounts?.length || 0,
        categories: unsyncedData.categories?.length || 0,
        transactions: unsyncedData.transactions?.length || 0,
        debts: unsyncedData.debts?.length || 0,
      });
      
      // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const accounts = await WatermelonDatabaseService.getAccounts();
      const transactions = await WatermelonDatabaseService.getTransactions();
      const categories = await WatermelonDatabaseService.getCategories();
      const debts = await WatermelonDatabaseService.getDebts();
      
      console.log('üìä [TestSync] –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ:', {
        accounts: accounts.length,
        transactions: transactions.length,
        categories: categories.length,
        debts: debts.length,
      });
    }
    
    console.log('‚úÖ [TestSync] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå [TestSync] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
};

// –ß–∏—Ç–∞–µ–º access token –∏–∑ —Ñ–∞–π–ª–∞
const tokenFile = path.join(__dirname, '..', 'test-token.txt');
let accessToken = '';

if (fs.existsSync(tokenFile)) {
  accessToken = fs.readFileSync(tokenFile, 'utf8').trim();
  console.log('‚úÖ Access token –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞');
} else {
  console.error('‚ùå –§–∞–π–ª test-token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test-token.txt –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à access token');
  process.exit(1);
}

const API_URL = 'https://cashcraft-backend-production.up.railway.app';

async function testCorrectSyncOrder() {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...\n');
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (sync.upload)
    console.log('üì§ 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (sync.upload)...');
    const uploadResponse = await fetch(`${API_URL}/api/v1/sync/upload`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        data: {
          accounts: [
            {
              id: 'test-account-1',
              name: '–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç',
              balance: 1000,
              currency: 'USD',
              type: 'cash',
              isIncludedInTotal: true,
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString()
            }
          ],
          categories: [],
          transactions: [],
          debts: [],
          exchangeRates: []
        }
      })
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å upload:', uploadResponse.status, uploadResponse.statusText);
    
    if (uploadResponse.ok) {
      const uploadResult = await uploadResponse.json();
      console.log('‚úÖ Upload —É—Å–ø–µ—à–µ–Ω:', uploadResult);
    } else {
      const errorText = await uploadResponse.text();
      console.error('‚ùå Upload –æ—à–∏–±–∫–∞:', errorText);
    }

    console.log('\nüì• 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (sync.download)...');
    
    // 2. –ü–æ—Ç–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (sync.download)
    const downloadResponse = await fetch(`${API_URL}/api/v1/sync/download`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å download:', downloadResponse.status, downloadResponse.statusText);

    if (downloadResponse.ok) {
      const downloadData = await downloadResponse.json();
      console.log('‚úÖ Download —É—Å–ø–µ—à–µ–Ω');
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      console.log('  - –°—á–µ—Ç–∞:', Array.isArray(downloadData.accounts) ? downloadData.accounts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', Array.isArray(downloadData.transactions) ? downloadData.transactions.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', Array.isArray(downloadData.categories) ? downloadData.categories.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –î–æ–ª–≥–∏:', Array.isArray(downloadData.debts) ? downloadData.debts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      
      if (downloadData.accounts && downloadData.accounts.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–π —Å—á–µ—Ç:', downloadData.accounts[0]);
      }
    } else {
      const errorText = await downloadResponse.text();
      console.error('‚ùå Download –æ—à–∏–±–∫–∞:', errorText);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üìã –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:');
    console.log('   1. sync.upload (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)');
    console.log('   2. sync.download (–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)');
    console.log('   3. importCloudData (–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
export default testSync;

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testSync();
  testCorrectSyncOrder();
} 