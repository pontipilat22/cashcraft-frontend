import AsyncStorage from '@react-native-async-storage/async-storage';
const fs = require('fs');
const path = require('path');
const { CloudSyncService } = require('../src/services/cloudSync');
const { ApiService } = require('../src/services/api');
const { LocalDatabaseService } = require('../src/services/localDatabase');

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
const testSync = async () => {
  console.log('üß™ Testing data synchronization...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await ApiService.getAccessToken();
    if (!token) {
      console.log('‚ùå No access token found');
      return;
    }
    
    console.log('‚úÖ Access token found');
    
    // –ü–æ–ª—É—á–∞–µ–º userId
    const currentUser = await AsyncStorage.getItem('currentUser');
    if (!currentUser) {
      console.log('‚ùå No current user found');
      return;
    }
    
    const user = JSON.parse(currentUser);
    console.log('‚úÖ Current user:', user.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const accounts = await LocalDatabaseService.getAccounts();
    const transactions = await LocalDatabaseService.getTransactions();
    const categories = await LocalDatabaseService.getCategories();
    const debts = await LocalDatabaseService.getDebts();
    
    console.log('üìä Local data:');
    console.log('  - Accounts:', accounts.length);
    console.log('  - Transactions:', transactions.length);
    console.log('  - Categories:', categories.length);
    console.log('  - Debts:', debts.length);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('üîÑ Syncing data to cloud...');
    const syncSuccess = await CloudSyncService.syncData(user.id, token);
    console.log('üì§ Sync result:', syncSuccess ? 'Success' : 'Failed');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
    console.log('üì• Downloading data from cloud...');
    const downloadSuccess = await CloudSyncService.downloadData(user.id, token);
    console.log('üì• Download result:', downloadSuccess ? 'Success' : 'Failed');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const accountsAfter = await LocalDatabaseService.getAccounts();
    const transactionsAfter = await LocalDatabaseService.getTransactions();
    const categoriesAfter = await LocalDatabaseService.getCategories();
    const debtsAfter = await LocalDatabaseService.getDebts();
    
    console.log('üìä Data after sync:');
    console.log('  - Accounts:', accountsAfter.length);
    console.log('  - Transactions:', transactionsAfter.length);
    console.log('  - Categories:', categoriesAfter.length);
    console.log('  - Debts:', debtsAfter.length);
    
    console.log('‚úÖ Sync test completed');
    
  } catch (error) {
    console.error('‚ùå Sync test failed:', error);
  }
};

// –ß–∏—Ç–∞–µ–º access token –∏–∑ —Ñ–∞–π–ª–∞
const tokenFile = path.join(__dirname, '..', 'test-token.txt');
let accessToken = '';

if (fs.existsSync(tokenFile)) {
  accessToken = fs.readFileSync(tokenFile, 'utf8').trim();
  console.log('‚úÖ Access token –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞');
} else {
  console.error('‚ùå –§–∞–π–ª test-token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test-token.txt –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à access token');
  process.exit(1);
}

const API_URL = 'https://cashcraft-backend-production.up.railway.app';

async function testCorrectSyncOrder() {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...\n');
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (sync.upload)
    console.log('üì§ 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (sync.upload)...');
    const uploadResponse = await fetch(`${API_URL}/api/v1/sync/upload`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        data: {
          accounts: [
            {
              id: 'test-account-1',
              name: '–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç',
              balance: 1000,
              currency: 'USD',
              type: 'cash',
              isIncludedInTotal: true,
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString()
            }
          ],
          categories: [],
          transactions: [],
          debts: [],
          exchangeRates: []
        }
      })
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å upload:', uploadResponse.status, uploadResponse.statusText);
    
    if (uploadResponse.ok) {
      const uploadResult = await uploadResponse.json();
      console.log('‚úÖ Upload —É—Å–ø–µ—à–µ–Ω:', uploadResult);
    } else {
      const errorText = await uploadResponse.text();
      console.error('‚ùå Upload –æ—à–∏–±–∫–∞:', errorText);
    }

    console.log('\nüì• 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (sync.download)...');
    
    // 2. –ü–æ—Ç–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (sync.download)
    const downloadResponse = await fetch(`${API_URL}/api/v1/sync/download`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å download:', downloadResponse.status, downloadResponse.statusText);

    if (downloadResponse.ok) {
      const downloadData = await downloadResponse.json();
      console.log('‚úÖ Download —É—Å–ø–µ—à–µ–Ω');
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      console.log('  - –°—á–µ—Ç–∞:', Array.isArray(downloadData.accounts) ? downloadData.accounts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', Array.isArray(downloadData.transactions) ? downloadData.transactions.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', Array.isArray(downloadData.categories) ? downloadData.categories.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      console.log('  - –î–æ–ª–≥–∏:', Array.isArray(downloadData.debts) ? downloadData.debts.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      
      if (downloadData.accounts && downloadData.accounts.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–π —Å—á–µ—Ç:', downloadData.accounts[0]);
      }
    } else {
      const errorText = await downloadResponse.text();
      console.error('‚ùå Download –æ—à–∏–±–∫–∞:', errorText);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üìã –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:');
    console.log('   1. sync.upload (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)');
    console.log('   2. sync.download (–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)');
    console.log('   3. importCloudData (–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
export default testSync;

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testSync();
  testCorrectSyncOrder();
} 