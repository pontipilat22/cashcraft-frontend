// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend
const testBackendConnection = async () => {
  const urls = [
    'http://0.0.0.0:3000',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://10.0.2.2:3000', // Android emulator
    'http://192.168.1.1:3000', // –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
  ];

  console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend...\n');

  for (const url of urls) {
    try {
      console.log(`–ü—Ä–æ–±—É–µ–º ${url}...`);
      const response = await fetch(`${url}/api/v1/health`);
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ! ${url} - ${data.status}`);
        return url;
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ ${response.status}: ${url}`);
      }
    } catch (error) {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${url} - ${error.message}`);
    }
  }

  console.log('\n‚ùå –ù–∏ –æ–¥–∏–Ω URL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  return null;
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBackendConnection().then(workingUrl => {
  if (workingUrl) {
    console.log(`\nüéâ –†–∞–±–æ—á–∏–π URL: ${workingUrl}`);
    console.log('–û–±–Ω–æ–≤–∏—Ç–µ API_URL –≤ CloudSyncService –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å');
  }
}); 