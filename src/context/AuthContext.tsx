import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert } from 'react-native';
import { AuthService, User, AuthResponse } from '../services/auth';
import { ApiService } from '../services/api';
import { LocalDatabaseService } from '../services/localDatabase';
import { useCurrency } from './CurrencyContext';

interface AuthUser {
  id: string;
  email: string;
  displayName: string;
  isGuest: boolean;
  isPremium?: boolean;
}

interface AuthContextType {
  user: AuthUser | null;
  isLoading: boolean;
  isPreparing: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string, displayName?: string) => Promise<void>;
  logout: () => Promise<void>;
  loginAsGuest: () => Promise<void>;
  loginWithGoogle: (googleData: { idToken: string; email: string; name: string; googleId: string }) => Promise<void>;
  forceReauth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<AuthUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isPreparing, setIsPreparing] = useState(false);
  const [hasShownOfflineNotification, setHasShownOfflineNotification] = useState(false);
  const { defaultCurrency } = useCurrency();

  const setupUserSession = useCallback(async (authUser: AuthUser, preserveLocalData: boolean = true) => {
    setIsPreparing(true);
    try {
      console.log('üîç [AuthContext] setupUserSession called:');
      console.log('  - authUser:', authUser);
      console.log('  - preserveLocalData:', preserveLocalData);
      
      await AsyncStorage.setItem('currentUser', JSON.stringify(authUser));
      await AsyncStorage.setItem('isGuest', authUser.isGuest ? 'true' : 'false');
      LocalDatabaseService.setUserId(authUser.id);
      
      // –ù–ï –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç - –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
      // if (!preserveLocalData) {
      //   await LocalDatabaseService.clearAllData(defaultCurrency);
      //   await LocalDatabaseService.initDatabase(defaultCurrency);
      // }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å backend
      try {
        console.log('Initializing exchange rates...');
        const { ExchangeRateService } = await import('../services/exchangeRate');
        const ratesInitialized = await ExchangeRateService.initializeRatesFromBackend();
        console.log('Exchange rates initialized:', ratesInitialized);
      } catch (rateError) {
        console.error('Failed to initialize exchange rates:', rateError);
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
      }
      setUser(authUser);
    } catch (error) {
      console.error("Failed to setup user session", error);
      await logout();
    } finally {
      setIsPreparing(false);
    }
  }, [defaultCurrency]);
  
  const checkAuthState = useCallback(async () => {
    setIsLoading(true);
    try {
      const savedUserStr = await AsyncStorage.getItem('currentUser');
      if (!savedUserStr) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const localUserId = `local_${Date.now()}`;
        const localUser: AuthUser = {
          id: localUserId,
          email: `${localUserId}@local.app`,
          displayName: '–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          isGuest: false,
          isPremium: false
        };
        await setupUserSession(localUser);
        return;
      }
      const savedUser: AuthUser = JSON.parse(savedUserStr);

      if (savedUser.isGuest) {
        await setupUserSession(savedUser);
        return;
      }
      
      const tokens = await ApiService.getTokens();
      if (tokens.accessToken && tokens.refreshToken) {
        ApiService.setAccessToken(tokens.accessToken);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        try {
          const isValid = await AuthService.isAuthenticated();
          if (isValid) {
            await setupUserSession(savedUser);
            return;
          }
        } catch (error) {
          console.log('üîç [AuthContext] –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...');
        }
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
        try {
          console.log('üîÑ [AuthContext] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...');
          const newTokens = await AuthService.refreshToken(tokens.refreshToken);
          if (newTokens) {
            console.log('‚úÖ [AuthContext] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
            await ApiService.saveTokens(newTokens.accessToken, newTokens.refreshToken);
            await setupUserSession(savedUser);
            return;
          } else {
            console.log('‚ö†Ô∏è [AuthContext] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ');
            // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
            await setupUserSession(savedUser);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if (!hasShownOfflineNotification && !savedUser.isGuest) {
              setHasShownOfflineNotification(true);
              Alert.alert(
                '–†–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω',
                '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.',
                [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }]
              );
            }
            return;
          }
                 } catch (refreshError) {
           console.log('‚ö†Ô∏è [AuthContext] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ:', refreshError);
           // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
           await setupUserSession(savedUser);
           
           // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
           if (!hasShownOfflineNotification && !savedUser.isGuest) {
             setHasShownOfflineNotification(true);
             Alert.alert(
               '–†–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω',
               '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.',
               [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }]
             );
           }
           return;
         }
             } else {
         console.log('‚ö†Ô∏è [AuthContext] –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ');
         // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
         await setupUserSession(savedUser);
         
         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
         if (!hasShownOfflineNotification && !savedUser.isGuest) {
           setHasShownOfflineNotification(true);
           Alert.alert(
             '–†–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω',
             '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.',
             [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }]
           );
         }
       }
    } catch (error) {
      console.error('‚ùå [AuthContext] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      // –î–∞–∂–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const savedUserStr = await AsyncStorage.getItem('currentUser');
      if (savedUserStr) {
        const savedUser: AuthUser = JSON.parse(savedUserStr);
        await setupUserSession(savedUser);
      }
    } finally {
      setIsLoading(false);
    }
  }, [setupUserSession]);

  useEffect(() => {
    checkAuthState();
  }, [checkAuthState]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–æ–Ω–µ
  useEffect(() => {
    if (!user || user.isGuest) return;

    const checkAndRefreshTokens = async () => {
      try {
        const tokens = await ApiService.getTokens();
        if (tokens.accessToken && tokens.refreshToken) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
          const isValid = await AuthService.isAuthenticated();
          if (!isValid) {
            console.log('üîÑ [AuthContext] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ...');
            const newTokens = await AuthService.refreshToken(tokens.refreshToken);
            if (newTokens) {
              console.log('‚úÖ [AuthContext] –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ–Ω–µ');
              await ApiService.saveTokens(newTokens.accessToken, newTokens.refreshToken);
            }
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è [AuthContext] –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    const interval = setInterval(checkAndRefreshTokens, 30 * 60 * 1000);
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const handleAppStateChange = (nextAppState: string) => {
      if (nextAppState === 'active') {
        checkAndRefreshTokens();
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const { AppState } = require('react-native');
    const subscription = AppState.addEventListener('change', handleAppStateChange);

    return () => {
      clearInterval(interval);
      subscription?.remove();
    };
  }, [user]);


  const handleAuthResponse = async (response: AuthResponse, preserveLocalData: boolean = false) => {
    await ApiService.saveTokens(response.accessToken, response.refreshToken);
    const authUser: AuthUser = {
      id: response.user.id,
      email: response.user.email,
      displayName: response.user.displayName,
      isGuest: response.user.isGuest,
      isPremium: response.user.isPremium,
    };
    await setupUserSession(authUser, preserveLocalData);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
    setHasShownOfflineNotification(false);
  }

  const login = async (email: string, password: string) => {
    console.log('üîç [AuthContext] login called');
    const response = await AuthService.login({ email, password });
    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ
    await handleAuthResponse(response, true);
  };

  const register = async (email: string, password: string, displayName?: string) => {
    console.log('üîç [AuthContext] register called');
    const response = await AuthService.register({ email, password, display_name: displayName });
    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await handleAuthResponse(response, true);
  };

  const logout = async () => {
    console.log('üîç [AuthContext] logout called');
    const isGuest = user?.isGuest;
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ—Å—Ç—å)
    if (!isGuest) {
      try {
        console.log('üîì Signing out from Google...');
        const { GoogleSignin } = await import('@react-native-google-signin/google-signin');
        await GoogleSignin.signOut();
        console.log('‚úÖ Successfully signed out from Google');
      } catch (googleSignOutError) {
        console.error('‚ùå Failed to sign out from Google:', googleSignOutError);
      }
    }
    
    setUser(null);
    // –ù–ï –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    // LocalDatabaseService.setUserId(null); // –£–ë–†–ê–ù–û, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    await ApiService.clearTokens();
    await AsyncStorage.removeItem('currentUser');
    await AsyncStorage.removeItem('isGuest'); // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Å—Ç–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    
    if (!isGuest) {
      try {
        await AuthService.logout();
      } catch (error) {
        console.log('Logout network error (ignored):', error);
      }
    }
    
    console.log('‚úÖ [AuthContext] Logout completed, local data preserved');
  };

  const loginAsGuest = async () => {
    const guestId = `guest_${Date.now()}`;
    const authUser: AuthUser = {
      id: guestId,
      email: `${guestId}@local.guest`,
      displayName: '–ì–æ—Å—Ç—å',
      isGuest: true,
      isPremium: false
    };
    await setupUserSession(authUser);
  };

  const loginWithGoogle = async (googleData: { idToken: string; email: string; name: string; googleId: string }) => {
    console.log('üîç [AuthContext] loginWithGoogle called');
    const response = await AuthService.loginWithGoogle(googleData);
    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google
    await handleAuthResponse(response, true);
  };

  const forceReauth = async () => {
    console.log('üîÑ [AuthContext] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    await logout();
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
  };

  return (
    <AuthContext.Provider value={{ user, isLoading, isPreparing, login, register, logout, loginAsGuest, loginWithGoogle, forceReauth }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
