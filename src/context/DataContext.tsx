import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Account, Transaction, Category, Debt } from '../types';
import { LocalDatabaseService } from '../services/localDatabase';
import { CloudSyncService } from '../services/cloudSync';
import { ApiService } from '../services/api';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { ExchangeRateService } from '../services/exchangeRate';
import { AuthService } from '../services/auth';

interface DataContextType {
  accounts: Account[];
  transactions: Transaction[];
  categories: Category[];
  debts: Debt[];
  totalBalance: number;
  isLoading: boolean;
  lastSyncTime: string | null;
  isSyncing: boolean;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏
  createAccount: (account: Omit<Account, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateAccount: (id: string, updates: Partial<Account>) => Promise<void>;
  deleteAccount: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
  createTransaction: (transaction: Omit<Transaction, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateTransaction: (id: string, updates: Partial<Transaction>) => Promise<void>;
  deleteTransaction: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ª–≥–∞–º–∏
  createDebt: (debt: Omit<Debt, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateDebt: (id: string, updates: Partial<Debt>) => Promise<void>;
  deleteDebt: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  addToSavings: (savingsId: string, amount: number) => Promise<void>;
  withdrawFromSavings: (savingsId: string, amount: number) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  createCategory: (category: Omit<Category, 'id'>) => Promise<void>;
  updateCategory: (id: string, updates: Partial<Category>) => Promise<void>;
  deleteCategory: (id: string) => Promise<void>;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  refreshData: () => Promise<void>;
  
  // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  resetAllData: () => Promise<void>;
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  syncData: () => Promise<void>;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getStatistics: (startDate?: Date, endDate?: Date) => {
    income: number;
    expense: number;
  };
}

const DataContext = createContext<DataContextType | undefined>(undefined);

export const DataProvider: React.FC<{ children: ReactNode; userId?: string | null; defaultCurrency?: string }> = ({ children, userId, defaultCurrency = 'USD' }) => {
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [debts, setDebts] = useState<Debt[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [totalBalance, setTotalBalance] = useState(0);
  const [lastSyncTime, setLastSyncTime] = useState<string | null>(null);
  const [isSyncing, setIsSyncing] = useState(false);
  const [syncInterval, setSyncInterval] = useState<NodeJS.Timeout | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (userId) {
      initializeApp();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      startAutoSync();
    } else {
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      setAccounts([]);
      setTransactions([]);
      setCategories([]);
      setDebts([]);
      setTotalBalance(0);
      stopAutoSync();
    }
    
    return () => {
      stopAutoSync();
    };
  }, [userId]);

  const initializeApp = async () => {
    try {
      console.log('üöÄ [DataContext] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      console.log('üöÄ [DataContext] userId:', userId);
      console.log('üöÄ [DataContext] defaultCurrency:', defaultCurrency);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (userId) {
        console.log('üóÑÔ∏è [DataContext] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', userId);
        LocalDatabaseService.setUserId(userId);
        
        console.log('üóÑÔ∏è [DataContext] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await LocalDatabaseService.initDatabase(defaultCurrency);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞
        if (!LocalDatabaseService.isDatabaseReady()) {
          console.log('‚ö†Ô∏è [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
          await LocalDatabaseService.forceReinitialize(defaultCurrency);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
          if (!LocalDatabaseService.isDatabaseReady()) {
            console.error('‚ùå [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
          }
        }
        
        console.log('‚úÖ [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        
        // –û—á–∏—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
        try {
          await AsyncStorage.removeItem('fallback_cloud_data');
          console.log('üßπ [DataContext] Fallback –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        } catch (clearError) {
          console.log('‚ö†Ô∏è [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', clearError);
        }
        
        console.log('üìä [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã...');
        await refreshData();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–µ
        const isGuest = await AsyncStorage.getItem('isGuest');
        console.log('üë§ [DataContext] isGuest:', isGuest);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        const wasDataReset = await AsyncStorage.getItem(`dataReset_${userId}`);
        console.log('üîÑ [DataContext] –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:', wasDataReset);
        
        if (isGuest !== 'true' && !wasDataReset) {
          console.log('‚òÅÔ∏è [DataContext] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ—Å—Ç—å –∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–∏—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞...');
          let token = await ApiService.getAccessToken();
          console.log('üîë [DataContext] Access token –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', token ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
          
          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
          if (!token) {
            console.log('üîÑ [DataContext] –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...');
            const refreshToken = await ApiService.getRefreshToken();
            console.log('üîÑ [DataContext] Refresh token –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', refreshToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
            
            if (refreshToken) {
              const newTokens = await AuthService.refreshToken(refreshToken);
              if (newTokens) {
                token = newTokens.accessToken;
                console.log('‚úÖ [DataContext] –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
              }
            }
          }
          
          if (token) {
            console.log('‚òÅÔ∏è [DataContext] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ (–∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö)
            const [accountsFromDb, transactionsFromDb, categoriesFromDb, debtsFromDb] = await Promise.all([
              LocalDatabaseService.getAccounts(),
              LocalDatabaseService.getTransactions(),
              LocalDatabaseService.getCategories(),
              LocalDatabaseService.getDebts()
            ]);
            
            const hasLocalData = accountsFromDb.length > 1 || // –ë–æ–ª—å—à–µ 1 (—Å—á–µ—Ç "–ù–∞–ª–∏—á–Ω—ã–µ" –æ—Å—Ç–∞–µ—Ç—Å—è)
                                transactionsFromDb.length > 0 ||
                                categoriesFromDb.length > 11 || // –ë–æ–ª—å—à–µ 11 (–±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
                                debtsFromDb.length > 0;
            
            if (hasLocalData) {
              console.log('üìä [DataContext] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
              // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ—Ç–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
              console.log('üì§ [DataContext] 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
              const syncSuccess = await CloudSyncService.syncData(userId, token);
              console.log('üì§ [DataContext] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:', syncSuccess ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ');
              
              console.log('üì• [DataContext] 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
              const hasCloudData = await CloudSyncService.downloadData(userId, token);
              console.log('üì• [DataContext] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:', hasCloudData ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ');
              
              if (hasCloudData) {
                console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
                await refreshData();
              } else {
                console.log('‚ö†Ô∏è [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
              }
            } else {
              console.log('üìä [DataContext] –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø—É—Å—Ç–∞—è (–ø–µ—Ä–µ–∑–∞—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç), —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞');
              // –ü–†–ò –ü–ï–†–ï–ó–ê–•–û–î–ï: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
              console.log('üì• [DataContext] 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
              const hasCloudData = await CloudSyncService.downloadData(userId, token);
              console.log('üì• [DataContext] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:', hasCloudData ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ');
              
              if (hasCloudData) {
                console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
                await refreshData();
              } else {
                console.log('‚ö†Ô∏è [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
              }
              
              // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
              console.log('üì§ [DataContext] 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)...');
              const syncSuccess = await CloudSyncService.syncData(userId, token);
              console.log('üì§ [DataContext] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncSuccess ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ');
            }
          } else {
            console.log('‚ùå [DataContext] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
          }
        } else if (wasDataReset) {
          console.log('üîÑ [DataContext] –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É...');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
          const [accountsFromDb, transactionsFromDb, categoriesFromDb, debtsFromDb] = await Promise.all([
            LocalDatabaseService.getAccounts(),
            LocalDatabaseService.getTransactions(),
            LocalDatabaseService.getCategories(),
            LocalDatabaseService.getDebts()
          ]);
          
          const hasOldData = accountsFromDb.length > 1 || // –ë–æ–ª—å—à–µ 1 (—Å—á–µ—Ç "–ù–∞–ª–∏—á–Ω—ã–µ" –æ—Å—Ç–∞–µ—Ç—Å—è)
                            transactionsFromDb.length > 0 ||
                            categoriesFromDb.length > 11 || // –ë–æ–ª—å—à–µ 11 (–±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
                            debtsFromDb.length > 0;
          
          if (hasOldData) {
            console.log('üßπ [DataContext] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ, –æ—á–∏—â–∞–µ–º...');
            console.log('  - –°—á–µ—Ç–∞:', accountsFromDb.length);
            console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionsFromDb.length);
            console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoriesFromDb.length);
            console.log('  - –î–æ–ª–≥–∏:', debtsFromDb.length);
            
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
            await LocalDatabaseService.clearAllData(defaultCurrency);
            console.log('‚úÖ [DataContext] –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–π –±–∞–∑—ã
            await refreshData();
          } else {
            console.log('‚úÖ [DataContext] –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —É–∂–µ —á–∏—Å—Ç–∞—è');
          }
          
          // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
          await AsyncStorage.removeItem(`dataReset_${userId}`);
          console.log('üßπ [DataContext] –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω');
        } else {
          console.log('üë§ [DataContext] –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –æ–±–ª–∞–∫–∞');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const syncTime = await LocalDatabaseService.getLastSyncTime();
        console.log('‚è∞ [DataContext] –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncTime);
        setLastSyncTime(syncTime);
      } else {
        console.log('‚ùå [DataContext] userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞');
      }
      
      console.log('‚úÖ [DataContext] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
      if (error instanceof Error && error.message.includes('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')) {
        try {
          console.log('üîÑ [DataContext] –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
          await LocalDatabaseService.forceReinitialize(defaultCurrency);
          await refreshData();
        } catch (initError) {
          console.error('‚ùå [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', initError);
        }
      }
    } finally {
      setIsLoading(false);
    }
  };

  const startAutoSync = async () => {
    const isGuest = await AsyncStorage.getItem('isGuest');
    if (isGuest === 'true' || !userId) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    const wasDataReset = await AsyncStorage.getItem(`dataReset_${userId}`);
    if (wasDataReset) {
      console.log('üîÑ [DataContext] –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
      return;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    try {
      const [accountsFromDb, transactionsFromDb] = await Promise.all([
        LocalDatabaseService.getAccounts(),
        LocalDatabaseService.getTransactions()
      ]);
      
      const hasOldData = accountsFromDb.length > 1 || transactionsFromDb.length > 0;
      if (hasOldData && wasDataReset) {
        console.log('üîÑ [DataContext] –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞');
        return;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ startAutoSync:', error);
    }
    
    // –û–¢–ö–õ–Æ–ß–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    // –¢–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    console.log('üîÑ [DataContext] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
    
    // const interval = setInterval(() => {
    //   syncData();
    // }, 5 * 60 * 1000);
    // setSyncInterval(interval);
  };

  const stopAutoSync = () => {
    if (syncInterval) {
      clearInterval(syncInterval);
      setSyncInterval(null);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const instantSync = async (action: string) => {
    try {
      console.log(`üîÑ [DataContext] –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ ${action}...`);
      console.log(`üìä [DataContext] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:`);
      console.log(`   - –°—á–µ—Ç–∞: ${accounts.length}`);
      console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactions.length}`);
      console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.length}`);
      console.log(`   - –î–æ–ª–≥–∏: ${debts.length}`);
      
      await syncData();
      console.log(`‚úÖ [DataContext] ${action} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
    } catch (error) {
      console.error(`‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ ${action}:`, error);
      console.log(`‚ö†Ô∏è [DataContext] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined
      });
    }
  };

  const syncData = async () => {
    console.log('üîÑ [DataContext] –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    console.log('üë§ [DataContext] userId:', userId);
    console.log('üîÑ [DataContext] isSyncing:', isSyncing);
    
    if (!userId || isSyncing) {
      console.log('‚ö†Ô∏è [DataContext] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –Ω–µ—Ç userId –∏–ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è');
      return;
    }
    
    const isGuest = await AsyncStorage.getItem('isGuest');
    console.log('üë§ [DataContext] isGuest:', isGuest);
    if (isGuest === 'true') {
      console.log('‚ö†Ô∏è [DataContext] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Ç—å');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    const wasDataReset = await AsyncStorage.getItem(`dataReset_${userId}`);
    console.log('üîÑ [DataContext] –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:', wasDataReset);
    if (wasDataReset) {
      console.log('üîÑ [DataContext] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
      return;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞, –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    console.log('üîç [DataContext] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    try {
      const [accountsFromDb, transactionsFromDb] = await Promise.all([
        LocalDatabaseService.getAccounts(),
        LocalDatabaseService.getTransactions()
      ]);
      
      console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã:');
      console.log('   - –°—á–µ—Ç–∞:', accountsFromDb.length);
      console.log('   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionsFromDb.length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ React (fallback —Ä–µ–∂–∏–º)
      console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ React:');
      console.log('   - –°—á–µ—Ç–∞:', accounts.length);
      console.log('   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactions.length);
      
      const hasOldData = accountsFromDb.length > 1 || transactionsFromDb.length > 0;
      const hasFallbackData = accounts.length > 0 || transactions.length > 0;
      
      console.log('üîç [DataContext] hasOldData:', hasOldData, 'hasFallbackData:', hasFallbackData);
      
      if (hasOldData && wasDataReset) {
        console.log('üîÑ [DataContext] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞');
        return;
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ fallback —Ä–µ–∂–∏–º–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
      if (hasFallbackData && !hasOldData) {
        console.log('üíæ [DataContext] –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π...');
        try {
          const fallbackData = {
            accounts: accounts,
            transactions: transactions,
            categories: categories,
            debts: debts,
            exchangeRates: [],
            lastSyncAt: new Date().toISOString(),
            userId: userId || ''
          };
          await AsyncStorage.setItem('fallback_cloud_data', JSON.stringify(fallbackData));
          console.log('‚úÖ [DataContext] Fallback –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        } catch (fallbackError) {
          console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è fallback –¥–∞–Ω–Ω—ã—Ö:', fallbackError);
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
    }
    
    console.log('üîÑ [DataContext] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    setIsSyncing(true);
    
    try {
      console.log('üîë [DataContext] –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞...');
      let token = await ApiService.getAccessToken();
      console.log('üîë [DataContext] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', token ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
      if (!token) {
        console.log('üîÑ [DataContext] –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...');
        const refreshToken = await ApiService.getRefreshToken();
        console.log('üîÑ [DataContext] Refresh token:', refreshToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
        
        if (refreshToken) {
          console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ AuthService...');
          const newTokens = await AuthService.refreshToken(refreshToken);
          if (newTokens) {
            console.log('‚úÖ [DataContext] –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ 401');
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            console.log('üîÑ [DataContext] –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
            const success = await CloudSyncService.syncData(userId, newTokens.accessToken);
            console.log('üì§ [DataContext] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', success ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ');
            
                          if (success) {
                const syncTime = await LocalDatabaseService.getLastSyncTime();
                setLastSyncTime(syncTime);
                console.log('‚úÖ [DataContext] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                return; // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏
              } else {
                console.log('‚ùå [DataContext] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback
                console.log('üîÑ [DataContext] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
                const fallbackData = await CloudSyncService.getFallbackData();
                if (fallbackData) {
                  console.log('üìä [DataContext] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
                  setAccounts(fallbackData.accounts || []);
                  setTransactions(fallbackData.transactions || []);
                  setCategories(fallbackData.categories || []);
                  setDebts(fallbackData.debts || []);
                  
                  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
                  const total = (fallbackData.accounts || [])
                    .filter(account => account.isIncludedInTotal !== false)
                    .reduce((sum, account) => {
                      let balance = account.balance;
                      if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
                        balance = account.balance * (account as any).exchangeRate;
                      }
                      return sum + balance;
                    }, 0);
                  
                  setTotalBalance(total);
                  console.log('‚úÖ [DataContext] –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ fallback');
                }
              }
          } else {
            console.log('‚ùå [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
          }
        } else {
          console.log('‚ùå [DataContext] Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      }
      
      if (token) {
        console.log('üîÑ [DataContext] –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ CloudSyncService...');
        const success = await CloudSyncService.syncData(userId, token);
        console.log('üì§ [DataContext] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', success ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ');
        
        if (success) {
          const syncTime = await LocalDatabaseService.getLastSyncTime();
          setLastSyncTime(syncTime);
          console.log('‚úÖ [DataContext] –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', syncTime);
        } else {
          console.log('‚ùå [DataContext] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
          
          // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback
          console.log('üîÑ [DataContext] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
          const fallbackData = await CloudSyncService.getFallbackData();
          if (fallbackData) {
            console.log('üìä [DataContext] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
            setAccounts(fallbackData.accounts || []);
            setTransactions(fallbackData.transactions || []);
            setCategories(fallbackData.categories || []);
            setDebts(fallbackData.debts || []);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            const total = (fallbackData.accounts || [])
              .filter(account => account.isIncludedInTotal !== false)
              .reduce((sum, account) => {
                let balance = account.balance;
                if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
                  balance = account.balance * (account as any).exchangeRate;
                }
                return sum + balance;
              }, 0);
            
            setTotalBalance(total);
            console.log('‚úÖ [DataContext] –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ fallback');
          }
        }
      } else {
        console.log('‚ùå [DataContext] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      console.log('‚ö†Ô∏è [DataContext] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined
      });
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      if (error instanceof Error && error.message.includes('401')) {
        console.log('üîÑ [DataContext] –û—à–∏–±–∫–∞ 401, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...');
        try {
          const refreshToken = await ApiService.getRefreshToken();
          console.log('üîÑ [DataContext] Refresh token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', refreshToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
          
          if (refreshToken) {
            console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ AuthService...');
            const newTokens = await AuthService.refreshToken(refreshToken);
            if (newTokens) {
              console.log('‚úÖ [DataContext] –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ 401');
              // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
              console.log('üîÑ [DataContext] –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
              const success = await CloudSyncService.syncData(userId, newTokens.accessToken);
              console.log('üì§ [DataContext] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', success ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ');
              
              if (success) {
                const syncTime = await LocalDatabaseService.getLastSyncTime();
                setLastSyncTime(syncTime);
                console.log('‚úÖ [DataContext] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
                return; // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏
              } else {
                console.log('‚ùå [DataContext] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback
                console.log('üîÑ [DataContext] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
                const fallbackData = await CloudSyncService.getFallbackData();
                if (fallbackData) {
                  console.log('üìä [DataContext] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
                  setAccounts(fallbackData.accounts || []);
                  setTransactions(fallbackData.transactions || []);
                  setCategories(fallbackData.categories || []);
                  setDebts(fallbackData.debts || []);
                  
                  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
                  const total = (fallbackData.accounts || [])
                    .filter(account => account.isIncludedInTotal !== false)
                    .reduce((sum, account) => {
                      let balance = account.balance;
                      if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
                        balance = account.balance * (account as any).exchangeRate;
                      }
                      return sum + balance;
                    }, 0);
                  
                  setTotalBalance(total);
                  console.log('‚úÖ [DataContext] –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ fallback');
                }
              }
            } else {
              console.log('‚ùå [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
            }
          } else {
            console.log('‚ùå [DataContext] Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
          }
        } catch (refreshError) {
          console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', refreshError);
        }
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        console.log('‚ùå [DataContext] –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É 401 –¥–∞–ª—å—à–µ');
        throw error;
      }
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
      console.log('‚ùå [DataContext] –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ');
      throw error;
    } finally {
      console.log('üîÑ [DataContext] –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      setIsSyncing(false);
    }
  };

  const refreshData = async () => {
    console.log('üìä [DataContext] RefreshData called...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      let isDatabaseReady = LocalDatabaseService.isDatabaseReady();
      console.log('üóÑÔ∏è [DataContext] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ refreshData:', isDatabaseReady);
      
      if (!isDatabaseReady) {
        console.log('‚ö†Ô∏è [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
        
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          await LocalDatabaseService.initDatabase(defaultCurrency);
          console.log('‚úÖ [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
          isDatabaseReady = true;
          
          // –û—á–∏—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
          try {
            await AsyncStorage.removeItem('fallback_cloud_data');
            console.log('üßπ [DataContext] Fallback –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
          } catch (clearError) {
            console.log('‚ö†Ô∏è [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å fallback –¥–∞–Ω–Ω—ã–µ:', clearError);
          }
        } catch (initError) {
          console.error('‚ùå [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', initError);
          console.log('‚ö†Ô∏è [DataContext] –†–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ...');
          
          // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
          const fallbackData = await CloudSyncService.getFallbackData();
          if (fallbackData) {
            console.log('üìä [DataContext] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback
            const fallbackAccounts = fallbackData.accounts || [];
            const fallbackTransactions = fallbackData.transactions || [];
            const fallbackCategories = fallbackData.categories || [];
            const fallbackDebts = fallbackData.debts || [];
            
            setAccounts(fallbackAccounts);
            setTransactions(fallbackTransactions);
            setCategories(fallbackCategories);
            setDebts(fallbackDebts);
            
            console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:');
            console.log('  - –°—á–µ—Ç–∞:', fallbackAccounts.length);
            console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', fallbackTransactions.length);
            console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', fallbackCategories.length);
            console.log('  - –î–æ–ª–≥–∏:', fallbackDebts.length);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            const total = fallbackAccounts
              .filter(account => account.isIncludedInTotal !== false)
              .reduce((sum, account) => {
                let balance = account.balance;
                // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ—Å—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
                if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
                  balance = account.balance * (account as any).exchangeRate;
                }
                return sum + balance;
              }, 0);
            
            setTotalBalance(total);
            console.log('üí∞ [DataContext] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ fallback:', total);
            console.log('‚úÖ [DataContext] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
          } else {
            console.log('‚ùå [DataContext] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ React
            if (accounts.length > 0 || transactions.length > 0) {
              console.log('üìä [DataContext] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ React, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ fallback...');
              
              try {
                const currentData = {
                  accounts: accounts,
                  transactions: transactions,
                  categories: categories,
                  debts: debts,
                  exchangeRates: [],
                  lastSyncAt: new Date().toISOString(),
                  userId: userId || ''
                };
                await AsyncStorage.setItem('fallback_cloud_data', JSON.stringify(currentData));
                console.log('üíæ [DataContext] –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
              } catch (fallbackError) {
                console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ fallback:', fallbackError);
              }
            }
            
            console.log('üìä [DataContext] –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:');
            console.log('  - –°—á–µ—Ç–∞:', accounts.length);
            console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactions.length);
            console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories.length);
            console.log('  - –î–æ–ª–≥–∏:', debts.length);
          }
          
          console.log('‚úÖ [DataContext] RefreshData –∑–∞–≤–µ—Ä—à–µ–Ω –≤ fallback —Ä–µ–∂–∏–º–µ');
          return;
        }
      }
      
      const [accountsFromDb, transactionsFromDb, categoriesFromDb, debtsFromDb] = await Promise.all([
        LocalDatabaseService.getAccounts(),
        LocalDatabaseService.getTransactions(),
        LocalDatabaseService.getCategories(),
        LocalDatabaseService.getDebts()
      ]);
      
      console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã:');
      console.log('  - –°—á–µ—Ç–∞:', accountsFromDb.length);
      console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionsFromDb.length);
      console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoriesFromDb.length);
      console.log('  - –î–æ–ª–≥–∏:', debtsFromDb.length);
      
      console.log('üìä [DataContext] –°—á–µ—Ç–∞ –∏–∑ –±–∞–∑—ã:', accountsFromDb);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è —Å—á–µ—Ç–æ–≤ —Å –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç–æ–π
      const accountsWithRates = await Promise.all(
        accountsFromDb.map(async (account: Account) => {
          if (account.currency && account.currency !== defaultCurrency) {
            try {
              // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –∫—É—Ä—Å
              let rate = await ExchangeRateService.getRate(account.currency, defaultCurrency);
              
              // –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ USD
              if (!rate && account.currency !== 'USD' && defaultCurrency !== 'USD') {
                console.log(`No direct rate ${account.currency}->${defaultCurrency}, trying through USD`);
                const toUsd = await ExchangeRateService.getRate(account.currency, 'USD');
                const fromUsd = await ExchangeRateService.getRate('USD', defaultCurrency);
                
                if (toUsd && fromUsd) {
                  rate = toUsd * fromUsd;
                  console.log(`Cross rate ${account.currency}->${defaultCurrency} = ${rate} (via USD)`);
                }
              }
              
              if (rate) {
                return { ...account, exchangeRate: rate };
              }
            } catch (error) {
              console.error(`Failed to get rate for ${account.currency}:`, error);
            }
          }
          return account;
        })
      );
      
      console.log('üìä [DataContext] –°—á–µ—Ç–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç:', accountsWithRates);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAccounts(accountsWithRates);
      setTransactions(transactionsFromDb);
      setCategories(categoriesFromDb);
      setDebts(debtsFromDb);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      const total = accountsWithRates
        .filter(account => account.isIncludedInTotal !== false)
        .reduce((sum, account) => {
          let balance = account.balance;
          // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ—Å—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
          if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
            balance = account.balance * (account as any).exchangeRate;
          }
          return sum + balance;
        }, 0);
      
      console.log('üí∞ [DataContext] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:', total);
      setTotalBalance(total);
      
      console.log('‚úÖ [DataContext] RefreshData –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –≤ refreshData:', error);
      console.log('‚ö†Ô∏è [DataContext] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ fallback —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...');
    }
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏
  const createAccount = async (account: Omit<Account, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!LocalDatabaseService.isDatabaseReady()) {
        console.log('[DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
        
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          await LocalDatabaseService.initDatabase(defaultCurrency);
          console.log('[DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (initError) {
          console.error('[DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', initError);
          console.log('[DataContext] –†–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ...');
          
          // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
          const newAccount: Account = {
            ...account,
            id: Date.now().toString(),
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
          };
          
          setAccounts(prev => [newAccount, ...prev]);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
          if (newAccount.isIncludedInTotal !== false) {
            let balanceToAdd = newAccount.balance;
            if (newAccount.currency && newAccount.currency !== defaultCurrency && 'exchangeRate' in newAccount && (newAccount as any).exchangeRate) {
              balanceToAdd = newAccount.balance * (newAccount as any).exchangeRate;
            }
            setTotalBalance(prev => prev + balanceToAdd);
          }
          
          console.log('[DataContext] –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ fallback —Ä–µ–∂–∏–º–µ:', newAccount);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          try {
            const fallbackData = {
              accounts: [newAccount, ...accounts],
              transactions: transactions,
              categories: categories,
              debts: debts,
              exchangeRates: [],
              lastSyncAt: new Date().toISOString(),
              userId: userId || ''
            };
            await AsyncStorage.setItem('fallback_cloud_data', JSON.stringify(fallbackData));
            console.log('üíæ [DataContext] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
          } catch (fallbackError) {
            console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ fallback:', fallbackError);
          }
          
          // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
          console.log('üîÑ [DataContext] –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞...');
          await instantSync('—Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞');
          console.log('‚úÖ [DataContext] –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
          
          return;
        }
      }
      
      const newAccount = await LocalDatabaseService.createAccount(account);
      setAccounts(prev => [newAccount, ...prev]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      if (newAccount.isIncludedInTotal !== false) {
        let balanceToAdd = newAccount.balance;
        // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ—Å—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
        if (newAccount.currency && newAccount.currency !== defaultCurrency && 'exchangeRate' in newAccount && (newAccount as any).exchangeRate) {
          balanceToAdd = newAccount.balance * (newAccount as any).exchangeRate;
        }
        setTotalBalance(prev => prev + balanceToAdd);
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('—Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞');
    } catch (error) {
      console.error('Error creating account:', error);
      throw error;
    }
  };

  const updateAccount = async (id: string, updates: Partial<Account>) => {
    try {
      const oldAccount = accounts.find(acc => acc.id === id);
      if (!oldAccount) return;
      
      console.log(`Updating account ${id} with:`, updates);
      
      await LocalDatabaseService.updateAccount(id, updates);
      setAccounts(prev => prev.map(acc => 
        acc.id === id ? { ...acc, ...updates } : acc
      ));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –±–∞–ª–∞–Ω—Å, –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      if (updates.balance !== undefined || updates.isIncludedInTotal !== undefined || 'exchangeRate' in updates) {
        const newAccount = { ...oldAccount, ...updates };
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –æ–±—â–µ–≥–æ
        let newTotalBalance = totalBalance;
        if (oldAccount.isIncludedInTotal !== false) {
          let oldConvertedBalance = oldAccount.balance;
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (oldAccount.currency && oldAccount.currency !== defaultCurrency && 'exchangeRate' in oldAccount && (oldAccount as any).exchangeRate) {
            oldConvertedBalance = oldAccount.balance * (oldAccount as any).exchangeRate;
          }
          newTotalBalance -= oldConvertedBalance;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫ –æ–±—â–µ–º—É
        if (newAccount.isIncludedInTotal !== false) {
          let newConvertedBalance = newAccount.balance;
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (newAccount.currency && newAccount.currency !== defaultCurrency && 'exchangeRate' in newAccount && (newAccount as any).exchangeRate) {
            newConvertedBalance = newAccount.balance * (newAccount as any).exchangeRate;
          }
          newTotalBalance += newConvertedBalance;
        }
        
        setTotalBalance(newTotalBalance);
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞');
    } catch (error) {
      console.error('Error updating account:', error);
      throw error;
    }
  };

  const deleteAccount = async (id: string) => {
    try {
      console.log('üóëÔ∏è [DataContext] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞ —Å ID:', id);
      
      const accountToDelete = accounts.find(acc => acc.id === id);
      if (!accountToDelete) {
        console.log('‚ùå [DataContext] –°—á—ë—Ç —Å ID', id, '–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
        return;
      }
      
      console.log('üìã [DataContext] –ù–∞–π–¥–µ–Ω —Å—á—ë—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        id: accountToDelete.id,
        name: accountToDelete.name,
        balance: accountToDelete.balance,
        type: accountToDelete.type
      });
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      console.log('üåê [DataContext] –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        const token = await ApiService.getAccessToken();
        if (token) {
          console.log('üîë [DataContext] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
          await ApiService.delete(`/accounts/${id}`);
          console.log('‚úÖ [DataContext] –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
        } else {
          console.log('‚ö†Ô∏è [DataContext] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (serverError) {
        console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverError);
        console.log('‚ö†Ô∏è [DataContext] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      console.log('üì± [DataContext] –£–¥–∞–ª—è–µ–º —Å—á—ë—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await LocalDatabaseService.deleteAccount(id);
      console.log('‚úÖ [DataContext] –°—á—ë—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      setAccounts(prev => prev.filter(acc => acc.id !== id));
      setTransactions(prev => prev.filter(trans => trans.accountId !== id));
      console.log('‚úÖ [DataContext] –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ —Å—á–µ—Ç –±—ã–ª –≤–∫–ª—é—á–µ–Ω –≤ –Ω–µ–≥–æ
      if (accountToDelete.isIncludedInTotal !== false) {
        console.log('üí∞ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å...');
        let balanceToRemove = accountToDelete.balance;
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π
        if (accountToDelete.currency && accountToDelete.currency !== defaultCurrency && 'exchangeRate' in accountToDelete && (accountToDelete as any).exchangeRate) {
          balanceToRemove = accountToDelete.balance * (accountToDelete as any).exchangeRate;
          console.log('üí± [DataContext] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', balanceToRemove);
        }
        setTotalBalance(prev => prev - balanceToRemove);
        console.log('‚úÖ [DataContext] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω');
      }
      
      console.log('‚úÖ [DataContext] –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞:', error);
      throw error;
    }
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
  const createTransaction = async (transaction: Omit<Transaction, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!LocalDatabaseService.isDatabaseReady()) {
        console.log('[DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ fallback —Ä–µ–∂–∏–º–µ...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const newTransaction: Transaction = {
          ...transaction,
          id: Date.now().toString(),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        };
        
        setTransactions(prev => [newTransaction, ...prev]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
        const account = accounts.find(acc => acc.id === transaction.accountId);
        if (account) {
          const balanceChange = transaction.type === 'income' ? transaction.amount : -transaction.amount;
          setAccounts(prev => prev.map(acc => 
            acc.id === transaction.accountId 
              ? { ...acc, balance: acc.balance + balanceChange }
              : acc
          ));
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
          if (account.isIncludedInTotal !== false) {
            let balanceChangeConverted = balanceChange;
            if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
              balanceChangeConverted = balanceChange * (account as any).exchangeRate;
            }
            setTotalBalance(prev => prev + balanceChangeConverted);
          }
        }
        
        console.log('[DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ fallback —Ä–µ–∂–∏–º–µ:', newTransaction);
        return;
      }
      
      const newTransaction = await LocalDatabaseService.createTransaction(transaction);
      setTransactions(prev => [newTransaction, ...prev]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
      const account = accounts.find(acc => acc.id === transaction.accountId);
      if (account) {
        const balanceChange = transaction.type === 'income' ? transaction.amount : -transaction.amount;
        setAccounts(prev => prev.map(acc => 
          acc.id === transaction.accountId 
            ? { ...acc, balance: acc.balance + balanceChange }
            : acc
        ));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        if (account.isIncludedInTotal !== false) {
          let balanceChangeConverted = balanceChange;
          if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
            balanceChangeConverted = balanceChange * (account as any).exchangeRate;
          }
          setTotalBalance(prev => prev + balanceChangeConverted);
        }
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('—Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    } catch (error) {
      console.error('Error creating transaction:', error);
      throw error;
    }
  };

  const updateTransaction = async (id: string, updates: Partial<Transaction>) => {
    try {
      const oldTransaction = transactions.find(t => t.id === id);
      if (!oldTransaction) return;
      
      await LocalDatabaseService.updateTransaction(id, oldTransaction, updates);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setTransactions(prev => prev.map(trans => 
        trans.id === id ? { ...trans, ...updates } : trans
      ));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Å—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (updates.amount !== undefined || updates.type !== undefined || updates.accountId !== undefined) {
        await refreshData(); // –ü—Ä–æ—â–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    } catch (error) {
      console.error('Error updating transaction:', error);
      throw error;
    }
  };

  const deleteTransaction = async (id: string) => {
    try {
      console.log('üóëÔ∏è [DataContext] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å ID:', id);
      
      const transaction = transactions.find(t => t.id === id);
      if (!transaction) {
        console.log('‚ùå [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID', id, '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
        return;
      }
      
      console.log('üìã [DataContext] –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        id: transaction.id,
        amount: transaction.amount,
        type: transaction.type,
        accountId: transaction.accountId,
        description: transaction.description
      });
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      console.log('üåê [DataContext] –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        const token = await ApiService.getAccessToken();
        if (token) {
          console.log('üîë [DataContext] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
          await ApiService.delete(`/transactions/${id}`);
          console.log('‚úÖ [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        } else {
          console.log('‚ö†Ô∏è [DataContext] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (serverError) {
        console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverError);
        console.log('‚ö†Ô∏è [DataContext] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      console.log('üì± [DataContext] –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await LocalDatabaseService.deleteTransaction(transaction);
      console.log('‚úÖ [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      
      // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      setTransactions(prev => prev.filter(trans => trans.id !== id));
      console.log('‚úÖ [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
      const account = accounts.find(acc => acc.id === transaction.accountId);
      if (account) {
        console.log('üí∞ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞:', account.name);
        const balanceChange = transaction.type === 'income' ? -transaction.amount : transaction.amount;
        console.log('üìä [DataContext] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', balanceChange, '(—Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transaction.type, ')');
        
        setAccounts(prev => prev.map(acc => 
          acc.id === transaction.accountId 
            ? { ...acc, balance: acc.balance + balanceChange }
            : acc
        ));
        console.log('‚úÖ [DataContext] –ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ —Å—á–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ –Ω–µ–≥–æ
        if (account.isIncludedInTotal !== false) {
          console.log('üí∞ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å...');
          let convertedBalanceChange = balanceChange;
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π
          if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
            convertedBalanceChange = balanceChange * (account as any).exchangeRate;
            console.log('üí± [DataContext] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', convertedBalanceChange);
          }
          setTotalBalance(prev => prev + convertedBalanceChange);
          console.log('‚úÖ [DataContext] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω');
        }
      } else {
        console.log('‚ö†Ô∏è [DataContext] –°—á—ë—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
      }
      
      console.log('‚úÖ [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  const createCategory = async (category: Omit<Category, 'id'>) => {
    try {
      const newCategory = await LocalDatabaseService.createCategory(category);
      setCategories(prev => [newCategory, ...prev]);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('—Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } catch (error) {
      console.error('Error creating category:', error);
      throw error;
    }
  };

  const updateCategory = async (id: string, updates: Partial<Category>) => {
    try {
      await LocalDatabaseService.updateCategory(id, updates);
      setCategories(prev => prev.map(cat => 
        cat.id === id ? { ...cat, ...updates } : cat
      ));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } catch (error) {
      console.error('Error updating category:', error);
      throw error;
    }
  };

  const deleteCategory = async (id: string) => {
    try {
      console.log('üóëÔ∏è [DataContext] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID:', id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–æ–µ"
      if (id === 'other_income' || id === 'other_expense') {
        console.log('‚ùå [DataContext] –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', id);
        throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      }
      
      const categoryToDelete = categories.find(cat => cat.id === id);
      if (!categoryToDelete) {
        console.log('‚ùå [DataContext] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID', id, '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
        return;
      }
      
      console.log('üìã [DataContext] –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        id: categoryToDelete.id,
        name: categoryToDelete.name,
        type: categoryToDelete.type
      });
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      console.log('üåê [DataContext] –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        const token = await ApiService.getAccessToken();
        if (token) {
          console.log('üîë [DataContext] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
          await ApiService.delete(`/categories/${id}`);
          console.log('‚úÖ [DataContext] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        } else {
          console.log('‚ö†Ô∏è [DataContext] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (serverError) {
        console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverError);
        console.log('‚ö†Ô∏è [DataContext] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      console.log('üì± [DataContext] –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await LocalDatabaseService.deleteCategory(id);
      console.log('‚úÖ [DataContext] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      setCategories(prev => prev.filter(cat => cat.id !== id));
      console.log('‚úÖ [DataContext] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —É–¥–∞–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π...');
      const deletedCategory = categories.find(cat => cat.id === id);
      if (deletedCategory) {
        const fallbackCategory = categories.find(cat =>
          cat.type === deletedCategory.type && cat.name.toLowerCase() === '–¥—Ä—É–≥–æ–µ'
        );
      
        if (!fallbackCategory) {
          console.log('‚ùå [DataContext] –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–æ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          throw new Error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–æ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      
        console.log('üîÑ [DataContext] –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–î—Ä—É–≥–æ–µ":', fallbackCategory.name);
        setTransactions(prev => prev.map(trans =>
          trans.categoryId === id ? { ...trans, categoryId: fallbackCategory.id } : trans
        ));
        console.log('‚úÖ [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        console.log('‚ö†Ô∏è [DataContext] –£–¥–∞–ª—ë–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      }
      
      console.log('‚úÖ [DataContext] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      throw error;
    }
  };

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  const addToSavings = async (savingsId: string, amount: number) => {
    try {
      const savingsAccount = accounts.find(acc => acc.id === savingsId);
      if (!savingsAccount) throw new Error('Savings account not found');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
      await LocalDatabaseService.updateAccount(savingsId, {
        savedAmount: (savingsAccount.savedAmount || 0) + amount
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAccounts(prev => prev.map(acc => 
        acc.id === savingsId 
          ? { ...acc, savedAmount: (acc.savedAmount || 0) + amount }
          : acc
      ));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è');
    } catch (error) {
      console.error('Error adding to savings:', error);
      throw error;
    }
  };
  
  // –°–Ω—è—Ç–∏–µ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  const withdrawFromSavings = async (savingsId: string, amount: number) => {
    try {
      const savingsAccount = accounts.find(acc => acc.id === savingsId);
      if (!savingsAccount) throw new Error('Savings account not found');
      
      const currentSavedAmount = savingsAccount.savedAmount || 0;
      if (currentSavedAmount < amount) {
        throw new Error('Insufficient savings amount');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
      await LocalDatabaseService.updateAccount(savingsId, {
        savedAmount: currentSavedAmount - amount
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAccounts(prev => prev.map(acc => 
        acc.id === savingsId 
          ? { ...acc, savedAmount: currentSavedAmount - amount }
          : acc
      ));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('—Å–Ω—è—Ç–∏—è —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è');
    } catch (error) {
      console.error('Error withdrawing from savings:', error);
      throw error;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const getStatistics = (startDate?: Date, endDate?: Date) => {
    let filteredTransactions = transactions;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (startDate || endDate) {
      filteredTransactions = transactions.filter(t => {
        const transDate = new Date(t.date);
        if (startDate && transDate < startDate) return false;
        if (endDate && transDate > endDate) return false;
        return true;
      });
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏
    const income = filteredTransactions
      .filter(t => t.type === 'income' && !t.description?.includes('–°–Ω—è—Ç–∏–µ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:'))
      .reduce((sum, t) => sum + t.amount, 0);
    
    const expense = filteredTransactions
      .filter(t => t.type === 'expense' && !t.description?.includes('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:'))
      .reduce((sum, t) => sum + t.amount, 0);
    
    return { income, expense };
  };
  
  // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const resetAllData = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (!userId) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
      
      console.log('üîÑ [DataContext] –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      // 1. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π CloudSyncService
      let serverResetSuccess = false;
      try {
        const token = await AsyncStorage.getItem('@cashcraft_access_token');
        if (token) {
          console.log('üåê [DataContext] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ CloudSyncService...');
          serverResetSuccess = await CloudSyncService.wipeData(userId, token);
          
          if (serverResetSuccess) {
            console.log('‚úÖ [DataContext] –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã —á–µ—Ä–µ–∑ CloudSyncService');
          } else {
            console.warn('‚ö†Ô∏è [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ CloudSyncService');
          }
        }
      } catch (serverError) {
        console.warn('‚ö†Ô∏è [DataContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', serverError);
      }
      
      // 2. –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (serverResetSuccess) {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º clearAllData –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        console.log('üì± [DataContext] –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É...');
        await LocalDatabaseService.clearAllData(defaultCurrency);
      } else {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π resetAllData
        console.log('üì± [DataContext] –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–±—Ä–æ—Å...');
        await LocalDatabaseService.resetAllData(defaultCurrency);
      }
      
      // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
      console.log('üè∑Ô∏è [DataContext] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö...');
      await AsyncStorage.setItem(`dataReset_${userId}`, 'true');
      
      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      await refreshData();
      
      console.log('‚úÖ [DataContext] –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      // –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
      if (error instanceof Error && error.message.includes('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')) {
        try {
          await initializeApp();
        } catch (initError) {
          console.error('Failed to reinitialize database:', initError);
        }
      }
      throw error;
    }
  };

  const createDebt = async (debt: Omit<Debt, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      const newDebt = await LocalDatabaseService.createDebt(debt);
      setDebts(prev => [newDebt, ...prev]);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('—Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞');
    } catch (error) {
      console.error('Error creating debt:', error);
      throw error;
    }
  };

  const updateDebt = async (id: string, updates: Partial<Debt>) => {
    try {
      await LocalDatabaseService.updateDebt(id, updates);
      setDebts(prev => prev.map(debt => 
        debt.id === id ? { ...debt, ...updates } : debt
      ));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await instantSync('–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞');
    } catch (error) {
      console.error('Error updating debt:', error);
      throw error;
    }
  };

  const deleteDebt = async (id: string) => {
    try {
      console.log('üóëÔ∏è [DataContext] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞ —Å ID:', id);
      
      const debtToDelete = debts.find(debt => debt.id === id);
      if (!debtToDelete) {
        console.log('‚ùå [DataContext] –î–æ–ª–≥ —Å ID', id, '–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
        return;
      }
      
      console.log('üìã [DataContext] –ù–∞–π–¥–µ–Ω –¥–æ–ª–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        id: debtToDelete.id,
        name: debtToDelete.name,
        amount: debtToDelete.amount,
        type: debtToDelete.type
      });
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      console.log('üåê [DataContext] –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        const token = await ApiService.getAccessToken();
        if (token) {
          console.log('üîë [DataContext] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
          await ApiService.delete(`/debts/${id}`);
          console.log('‚úÖ [DataContext] –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
        } else {
          console.log('‚ö†Ô∏è [DataContext] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (serverError) {
        console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverError);
        console.log('‚ö†Ô∏è [DataContext] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      console.log('üì± [DataContext] –£–¥–∞–ª—è–µ–º –¥–æ–ª–≥ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await LocalDatabaseService.deleteDebt(id);
      console.log('‚úÖ [DataContext] –î–æ–ª–≥ —É–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      setDebts(prev => prev.filter(debt => debt.id !== id));
      console.log('‚úÖ [DataContext] –î–æ–ª–≥ —É–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      
      console.log('‚úÖ [DataContext] –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞:', error);
      throw error;
    }
  };

  return (
    <DataContext.Provider
      value={{
        accounts,
        transactions,
        categories,
        debts,
        totalBalance,
        isLoading,
        lastSyncTime,
        isSyncing,
        createAccount,
        updateAccount,
        deleteAccount,
        createTransaction,
        updateTransaction,
        deleteTransaction,
        addToSavings,
        withdrawFromSavings,
        createCategory,
        updateCategory,
        deleteCategory,
        refreshData,
        resetAllData,
        syncData,
        getStatistics,
        createDebt,
        updateDebt,
        deleteDebt,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => {
  const context = useContext(DataContext);
  if (!context) {
    throw new Error('useData must be used within DataProvider');
  }
  return context;
}; 