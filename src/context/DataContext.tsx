import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';
import { Account, Transaction, Category, Debt } from '../types';
import { LocalDatabaseService } from '../services/localDatabase';
import { ApiService } from '../services/api';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { ExchangeRateService } from '../services/exchangeRate';
import { AuthService } from '../services/auth';

interface DataContextType {
  accounts: Account[];
  transactions: Transaction[];
  categories: Category[];
  debts: Debt[];
  totalBalance: number;
  isLoading: boolean;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏
  createAccount: (account: Omit<Account, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateAccount: (id: string, updates: Partial<Account>) => Promise<void>;
  deleteAccount: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
  createTransaction: (transaction: Omit<Transaction, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateTransaction: (id: string, updates: Partial<Transaction>) => Promise<void>;
  deleteTransaction: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ª–≥–∞–º–∏
  createDebt: (debt: Omit<Debt, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateDebt: (id: string, updates: Partial<Debt>) => Promise<void>;
  deleteDebt: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  addToSavings: (savingsId: string, amount: number) => Promise<void>;
  withdrawFromSavings: (savingsId: string, amount: number) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  createCategory: (category: Omit<Category, 'id'>) => Promise<void>;
  updateCategory: (id: string, updates: Partial<Category>) => Promise<void>;
  deleteCategory: (id: string) => Promise<void>;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  refreshData: () => Promise<void>;
  
  // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  resetAllData: () => Promise<void>;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getStatistics: (startDate?: Date, endDate?: Date) => {
    income: number;
    expense: number;
  };
}

const DataContext = createContext<DataContextType | undefined>(undefined);

export const DataProvider: React.FC<{ children: ReactNode; userId?: string | null; defaultCurrency?: string }> = ({ children, userId, defaultCurrency = 'USD' }) => {
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [debts, setDebts] = useState<Debt[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [totalBalance, setTotalBalance] = useState(0);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (userId) {
      initializeApp();
    } else {
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      setAccounts([]);
      setTransactions([]);
      setCategories([]);
      setDebts([]);
      setTotalBalance(0);
    }
  }, [userId]);

  const initializeApp = async () => {
    try {
      console.log('üöÄ [DataContext] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      console.log('üöÄ [DataContext] userId:', userId);
      console.log('üöÄ [DataContext] defaultCurrency:', defaultCurrency);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (userId) {
        console.log('üóÑÔ∏è [DataContext] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', userId);
        LocalDatabaseService.setUserId(userId);
        
        console.log('üóÑÔ∏è [DataContext] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await LocalDatabaseService.initDatabase(defaultCurrency);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞
        if (!LocalDatabaseService.isDatabaseReady()) {
          console.log('‚ö†Ô∏è [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
          await LocalDatabaseService.forceReinitialize(defaultCurrency);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
          if (!LocalDatabaseService.isDatabaseReady()) {
            console.error('‚ùå [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
          }
        }
        
        console.log('‚úÖ [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        
        console.log('üìä [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã...');
        await refreshData();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        console.log('üí± [DataContext] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...');
        await ExchangeRateService.initializeRatesFromBackend();
        
        console.log('‚úÖ [DataContext] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      setIsLoading(false);
    }
  };

  const refreshData = useCallback(async () => {
    try {
      console.log('üìä [DataContext] RefreshData called...');
      
      if (!LocalDatabaseService.isDatabaseReady()) {
        console.log('üóÑÔ∏è [DataContext] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ refreshData:', false);
        return;
      }
      
      console.log('üóÑÔ∏è [DataContext] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ refreshData:', true);
      
      const [accountsFromDb, transactionsFromDb, categoriesFromDb, debtsFromDb] = await Promise.all([
        LocalDatabaseService.getAccounts(),
        LocalDatabaseService.getTransactions(),
        LocalDatabaseService.getCategories(),
        LocalDatabaseService.getDebts()
      ]);

      console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã:');
      console.log('  - –°—á–µ—Ç–∞:', accountsFromDb.length);
      console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionsFromDb.length);
      console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoriesFromDb.length);
      console.log('  - –î–æ–ª–≥–∏:', debtsFromDb.length);

      console.log('üìä [DataContext] –°—á–µ—Ç–∞ –∏–∑ –±–∞–∑—ã:', accountsFromDb);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è —Å—á–µ—Ç–æ–≤ —Å –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç–æ–π
      const accountsWithRates = await Promise.all(
        accountsFromDb.map(async (account: Account) => {
          if (account.currency && account.currency !== defaultCurrency) {
            try {
              // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –∫—É—Ä—Å
              let rate = await ExchangeRateService.getRate(account.currency, defaultCurrency);
              
              // –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ USD
              if (!rate && account.currency !== 'USD' && defaultCurrency !== 'USD') {
                console.log(`No direct rate ${account.currency}->${defaultCurrency}, trying through USD`);
                const toUsd = await ExchangeRateService.getRate(account.currency, 'USD');
                const fromUsd = await ExchangeRateService.getRate('USD', defaultCurrency);
                
                if (toUsd && fromUsd) {
                  rate = toUsd * fromUsd;
                  console.log(`Cross rate ${account.currency}->${defaultCurrency} = ${rate} (via USD)`);
                }
              }
              
              if (rate) {
                return { ...account, exchangeRate: rate };
              }
            } catch (error) {
              console.error(`Failed to get rate for ${account.currency}:`, error);
            }
          }
          return account;
        })
      );

      console.log('üìä [DataContext] –°—á–µ—Ç–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç:', accountsWithRates);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAccounts(accountsWithRates);
      setTransactions(transactionsFromDb);
      setCategories(categoriesFromDb);
      setDebts(debtsFromDb);

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç
      const total = accountsWithRates
        .filter(account => account.isIncludedInTotal !== false)
        .reduce((sum, account) => {
          let balance = account.balance;
          // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ—Å—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
          if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
            balance = account.balance * (account as any).exchangeRate;
          }
          return sum + balance;
        }, 0);

      console.log('üí∞ [DataContext] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:', total);
      setTotalBalance(total);

      console.log('‚úÖ [DataContext] RefreshData –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setIsLoading(false);
    }
  }, [defaultCurrency]);

  const createAccount = async (account: Omit<Account, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      console.log('‚ûï [DataContext] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—á–µ—Ç:', account.name);
      
      await LocalDatabaseService.createAccount(account);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞:', error);
      throw error;
    }
  };

  const updateAccount = async (id: string, updates: Partial<Account>) => {
    try {
      console.log('‚úèÔ∏è [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç:', id);
      
      await LocalDatabaseService.updateAccount(id, updates);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞:', error);
      throw error;
    }
  };

  const deleteAccount = async (id: string) => {
    try {
      console.log('üóëÔ∏è [DataContext] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞ —Å ID:', id);
      
      const accountToDelete = accounts.find(acc => acc.id === id);
      if (!accountToDelete) {
        console.log('‚ùå [DataContext] –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
      }
      
      console.log('üìã [DataContext] –ù–∞–π–¥–µ–Ω —Å—á—ë—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        id: accountToDelete.id,
        name: accountToDelete.name,
        balance: accountToDelete.balance,
        type: accountToDelete.type
      });
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üì± [DataContext] –£–¥–∞–ª—è–µ–º —Å—á—ë—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await LocalDatabaseService.deleteAccount(id);
      console.log('‚úÖ [DataContext] –°—á—ë—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('üîÑ [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      await refreshData();
      console.log('‚úÖ [DataContext] –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      
      console.log('‚úÖ [DataContext] –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞:', error);
      throw error;
    }
  };

  const createTransaction = async (transaction: Omit<Transaction, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      console.log('‚ûï [DataContext] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', transaction.description);
      
      await LocalDatabaseService.createTransaction(transaction);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  };

  const updateTransaction = async (id: string, updates: Partial<Transaction>) => {
    try {
      console.log('‚úèÔ∏è [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', id);
      
      const oldTransaction = transactions.find(t => t.id === id);
      if (!oldTransaction) {
        throw new Error('Transaction not found');
      }
      
      await LocalDatabaseService.updateTransaction(id, oldTransaction, updates);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  };

  const deleteTransaction = async (id: string) => {
    try {
      console.log('üóëÔ∏è [DataContext] –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', id);
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ id
      const transaction = transactions.find(t => t.id === id);
      if (!transaction) {
        throw new Error(`Transaction with id ${id} not found`);
      }
      
      await LocalDatabaseService.deleteTransaction(transaction);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  };

  const createCategory = async (category: Omit<Category, 'id'>) => {
    try {
      console.log('‚ûï [DataContext] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', category.name);
      
      await LocalDatabaseService.createCategory(category);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      throw error;
    }
  };

  const updateCategory = async (id: string, updates: Partial<Category>) => {
    try {
      console.log('‚úèÔ∏è [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', id);
      
      await LocalDatabaseService.updateCategory(id, updates);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      throw error;
    }
  };

  const deleteCategory = async (id: string) => {
    try {
      console.log('üóëÔ∏è [DataContext] –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', id);
      
      await LocalDatabaseService.deleteCategory(id);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      throw error;
    }
  };

  const addToSavings = async (savingsId: string, amount: number) => {
    try {
      console.log('üí∞ [DataContext] –ü–æ–ø–æ–ª–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:', savingsId, '–Ω–∞ —Å—É–º–º—É:', amount);
      
      const savingsAccount = accounts.find(acc => acc.id === savingsId);
      if (!savingsAccount) throw new Error('Savings account not found');
      
      await LocalDatabaseService.updateAccount(savingsId, {
        savedAmount: (savingsAccount.savedAmount || 0) + amount
      });
      await refreshData();
      
      console.log('‚úÖ [DataContext] –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  };

  const withdrawFromSavings = async (savingsId: string, amount: number) => {
    try {
      console.log('üí∏ [DataContext] –°–Ω–∏–º–∞–µ–º —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:', savingsId, '—Å—É–º–º—É:', amount);
      
      const savingsAccount = accounts.find(acc => acc.id === savingsId);
      if (!savingsAccount) throw new Error('Savings account not found');
      
      const currentSavedAmount = savingsAccount.savedAmount || 0;
      if (currentSavedAmount < amount) {
        throw new Error('Insufficient savings amount');
      }
      
      await LocalDatabaseService.updateAccount(savingsId, {
        savedAmount: currentSavedAmount - amount
      });
      await refreshData();
      
      console.log('‚úÖ [DataContext] –° –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  };

  const getStatistics = useCallback((startDate?: Date, endDate?: Date) => {
    const filteredTransactions = transactions.filter(transaction => {
      if (startDate && new Date(transaction.date) < startDate) return false;
      if (endDate && new Date(transaction.date) > endDate) return false;
      return true;
    });

    const income = filteredTransactions
      .filter(t => t.type === 'income')
      .reduce((sum, t) => sum + t.amount, 0);

    const expense = filteredTransactions
      .filter(t => t.type === 'expense')
      .reduce((sum, t) => sum + t.amount, 0);

    return { income, expense };
  }, [transactions]);

  const resetAllData = async () => {
    try {
      console.log('üóëÔ∏è [DataContext] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö...');
      
      if (userId) {
        await LocalDatabaseService.clearAllData(defaultCurrency);
        await refreshData();
        
        console.log('‚úÖ [DataContext] –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã');
      }
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  };

  const createDebt = async (debt: Omit<Debt, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      console.log('‚ûï [DataContext] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–ª–≥:', debt.name);
      
      await LocalDatabaseService.createDebt(debt);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞:', error);
      throw error;
    }
  };

  const updateDebt = async (id: string, updates: Partial<Debt>) => {
    try {
      console.log('‚úèÔ∏è [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–≥:', id);
      
      await LocalDatabaseService.updateDebt(id, updates);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞:', error);
      throw error;
    }
  };

  const deleteDebt = async (id: string) => {
    try {
      console.log('üóëÔ∏è [DataContext] –£–¥–∞–ª—è–µ–º –¥–æ–ª–≥:', id);
      
      await LocalDatabaseService.deleteDebt(id);
      await refreshData();
      
      console.log('‚úÖ [DataContext] –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞:', error);
      throw error;
    }
  };

  const value: DataContextType = {
    accounts,
    transactions,
    categories,
    debts,
    totalBalance,
    isLoading,
    createAccount,
    updateAccount,
    deleteAccount,
    createTransaction,
    updateTransaction,
    deleteTransaction,
    createCategory,
    updateCategory,
    deleteCategory,
    addToSavings,
    withdrawFromSavings,
    refreshData,
    resetAllData,
    createDebt,
    updateDebt,
    deleteDebt,
    getStatistics,
  };

  return (
    <DataContext.Provider value={value}>
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => {
  const context = useContext(DataContext);
  if (context === undefined) {
    throw new Error('useData must be used within a DataProvider');
  }
  return context;
}; 