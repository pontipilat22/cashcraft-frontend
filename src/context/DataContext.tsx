import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Account, Transaction, Category, Debt } from '../types';
import { LocalDatabaseService } from '../services/localDatabase';
import { CloudSyncService } from '../services/cloudSync';
import { ApiService } from '../services/api';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { ExchangeRateService } from '../services/exchangeRate';
import { AuthService } from '../services/auth';

interface DataContextType {
  accounts: Account[];
  transactions: Transaction[];
  categories: Category[];
  debts: Debt[];
  totalBalance: number;
  isLoading: boolean;
  lastSyncTime: string | null;
  isSyncing: boolean;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏
  createAccount: (account: Omit<Account, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateAccount: (id: string, updates: Partial<Account>) => Promise<void>;
  deleteAccount: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
  createTransaction: (transaction: Omit<Transaction, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateTransaction: (id: string, updates: Partial<Transaction>) => Promise<void>;
  deleteTransaction: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ª–≥–∞–º–∏
  createDebt: (debt: Omit<Debt, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateDebt: (id: string, updates: Partial<Debt>) => Promise<void>;
  deleteDebt: (id: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  addToSavings: (savingsId: string, amount: number) => Promise<void>;
  withdrawFromSavings: (savingsId: string, amount: number) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  createCategory: (category: Omit<Category, 'id'>) => Promise<void>;
  updateCategory: (id: string, updates: Partial<Category>) => Promise<void>;
  deleteCategory: (id: string) => Promise<void>;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  refreshData: () => Promise<void>;
  
  // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  resetAllData: () => Promise<void>;
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  syncData: () => Promise<void>;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getStatistics: (startDate?: Date, endDate?: Date) => {
    income: number;
    expense: number;
  };
}

const DataContext = createContext<DataContextType | undefined>(undefined);

export const DataProvider: React.FC<{ children: ReactNode; userId?: string | null; defaultCurrency?: string }> = ({ children, userId, defaultCurrency = 'USD' }) => {
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [debts, setDebts] = useState<Debt[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [totalBalance, setTotalBalance] = useState(0);
  const [lastSyncTime, setLastSyncTime] = useState<string | null>(null);
  const [isSyncing, setIsSyncing] = useState(false);
  const [syncInterval, setSyncInterval] = useState<NodeJS.Timeout | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (userId) {
      initializeApp();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      startAutoSync();
    } else {
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      setAccounts([]);
      setTransactions([]);
      setCategories([]);
      setDebts([]);
      setTotalBalance(0);
      stopAutoSync();
    }
    
    return () => {
      stopAutoSync();
    };
  }, [userId]);

  const initializeApp = async () => {
    try {
      console.log('üöÄ [DataContext] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      console.log('üöÄ [DataContext] userId:', userId);
      console.log('üöÄ [DataContext] defaultCurrency:', defaultCurrency);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (userId) {
        console.log('üóÑÔ∏è [DataContext] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', userId);
        LocalDatabaseService.setUserId(userId);
        
        console.log('üóÑÔ∏è [DataContext] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await LocalDatabaseService.initDatabase(defaultCurrency);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞
        if (!LocalDatabaseService.isDatabaseReady()) {
          console.log('‚ö†Ô∏è [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
          await LocalDatabaseService.forceReinitialize(defaultCurrency);
        }
        
        console.log('üìä [DataContext] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã...');
        await refreshData();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–µ
        const isGuest = await AsyncStorage.getItem('isGuest');
        console.log('üë§ [DataContext] isGuest:', isGuest);
        
        if (isGuest !== 'true') {
          console.log('‚òÅÔ∏è [DataContext] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ—Å—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞...');
          let token = await ApiService.getAccessToken();
          console.log('üîë [DataContext] Access token –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', token ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
          
          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
          if (!token) {
            console.log('üîÑ [DataContext] –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...');
            const refreshToken = await ApiService.getRefreshToken();
            console.log('üîÑ [DataContext] Refresh token –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', refreshToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
            
            if (refreshToken) {
              const newTokens = await AuthService.refreshToken(refreshToken);
              if (newTokens) {
                token = newTokens.accessToken;
                console.log('‚úÖ [DataContext] –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
              }
            }
          }
          
          if (token) {
            console.log('‚òÅÔ∏è [DataContext] –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞...');
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
            const hasCloudData = await CloudSyncService.downloadData(userId, token);
            console.log('‚òÅÔ∏è [DataContext] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ–±–ª–∞–∫–∞:', hasCloudData ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ');
            
            if (hasCloudData) {
              console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–±–ª–∞–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
              await refreshData();
            } else {
              console.log('‚ö†Ô∏è [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞');
            }
          } else {
            console.log('‚ùå [DataContext] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞');
          }
        } else {
          console.log('üë§ [DataContext] –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –æ–±–ª–∞–∫–∞');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const syncTime = await LocalDatabaseService.getLastSyncTime();
        console.log('‚è∞ [DataContext] –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncTime);
        setLastSyncTime(syncTime);
      } else {
        console.log('‚ùå [DataContext] userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞');
      }
      
      console.log('‚úÖ [DataContext] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
      if (error instanceof Error && error.message.includes('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')) {
        try {
          console.log('üîÑ [DataContext] –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
          await LocalDatabaseService.forceReinitialize(defaultCurrency);
          await refreshData();
        } catch (initError) {
          console.error('‚ùå [DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', initError);
        }
      }
    } finally {
      setIsLoading(false);
    }
  };

  const startAutoSync = async () => {
    const isGuest = await AsyncStorage.getItem('isGuest');
    if (isGuest === 'true' || !userId) return;
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    const interval = setInterval(() => {
      syncData();
    }, 5 * 60 * 1000);
    
    setSyncInterval(interval);
  };

  const stopAutoSync = () => {
    if (syncInterval) {
      clearInterval(syncInterval);
      setSyncInterval(null);
    }
  };

  const syncData = async () => {
    if (!userId || isSyncing) return;
    
    const isGuest = await AsyncStorage.getItem('isGuest');
    if (isGuest === 'true') return;
    
    setIsSyncing(true);
    
    try {
      let token = await ApiService.getAccessToken();
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
      if (!token) {
        console.log('[DataContext] –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...');
        const refreshToken = await ApiService.getRefreshToken();
        if (refreshToken) {
          const newTokens = await AuthService.refreshToken(refreshToken);
          if (newTokens) {
            console.log('[DataContext] –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ 401');
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            const success = await CloudSyncService.syncData(userId, newTokens.accessToken);
            if (success) {
              const syncTime = await LocalDatabaseService.getLastSyncTime();
              setLastSyncTime(syncTime);
              return; // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏
            }
          }
        }
      }
      
      if (token) {
        const success = await CloudSyncService.syncData(userId, token);
        if (success) {
          const syncTime = await LocalDatabaseService.getLastSyncTime();
          setLastSyncTime(syncTime);
        }
      }
    } catch (error) {
      console.error('Sync error:', error);
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      if (error instanceof Error && error.message.includes('401')) {
        console.log('[DataContext] –û—à–∏–±–∫–∞ 401, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...');
        try {
          const refreshToken = await ApiService.getRefreshToken();
          if (refreshToken) {
            const newTokens = await AuthService.refreshToken(refreshToken);
            if (newTokens) {
              console.log('[DataContext] –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ 401');
              // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
              const success = await CloudSyncService.syncData(userId, newTokens.accessToken);
              if (success) {
                const syncTime = await LocalDatabaseService.getLastSyncTime();
                setLastSyncTime(syncTime);
                return; // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏
              }
            }
          }
        } catch (refreshError) {
          console.error('Failed to refresh token:', refreshError);
        }
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        throw error;
      }
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
      throw error;
    } finally {
      setIsSyncing(false);
    }
  };

  const refreshData = async () => {
    console.log('üìä [DataContext] RefreshData called...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const isDatabaseReady = LocalDatabaseService.isDatabaseReady();
      console.log('üóÑÔ∏è [DataContext] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ refreshData:', isDatabaseReady);
      
      if (!isDatabaseReady) {
        console.log('‚ö†Ô∏è [DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, —Ä–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const fallbackData = await CloudSyncService.getFallbackData();
        if (fallbackData) {
          console.log('üìä [DataContext] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback
          const fallbackAccounts = fallbackData.accounts || [];
          const fallbackTransactions = fallbackData.transactions || [];
          const fallbackCategories = fallbackData.categories || [];
          const fallbackDebts = fallbackData.debts || [];
          
          setAccounts(fallbackAccounts);
          setTransactions(fallbackTransactions);
          setCategories(fallbackCategories);
          setDebts(fallbackDebts);
          
          console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:');
          console.log('  - –°—á–µ—Ç–∞:', fallbackAccounts.length);
          console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', fallbackTransactions.length);
          console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', fallbackCategories.length);
          console.log('  - –î–æ–ª–≥–∏:', fallbackDebts.length);
          
          // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
          const total = fallbackAccounts
            .filter(account => account.isIncludedInTotal !== false)
            .reduce((sum, account) => {
              let balance = account.balance;
              // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ—Å—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
              if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
                balance = account.balance * (account as any).exchangeRate;
              }
              return sum + balance;
            }, 0);
          
          setTotalBalance(total);
          console.log('üí∞ [DataContext] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ fallback:', total);
          console.log('‚úÖ [DataContext] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        } else {
          console.log('‚ùå [DataContext] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
          console.log('üìä [DataContext] –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:');
          console.log('  - –°—á–µ—Ç–∞:', accounts.length);
          console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactions.length);
          console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories.length);
          console.log('  - –î–æ–ª–≥–∏:', debts.length);
        }
        
        console.log('‚úÖ [DataContext] RefreshData –∑–∞–≤–µ—Ä—à–µ–Ω –≤ fallback —Ä–µ–∂–∏–º–µ');
        return;
      }
      
      const [accountsFromDb, transactionsFromDb, categoriesFromDb, debtsFromDb] = await Promise.all([
        LocalDatabaseService.getAccounts(),
        LocalDatabaseService.getTransactions(),
        LocalDatabaseService.getCategories(),
        LocalDatabaseService.getDebts()
      ]);
      
      console.log('üìä [DataContext] –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã:');
      console.log('  - –°—á–µ—Ç–∞:', accountsFromDb.length);
      console.log('  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionsFromDb.length);
      console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoriesFromDb.length);
      console.log('  - –î–æ–ª–≥–∏:', debtsFromDb.length);
      
      console.log('üìä [DataContext] –°—á–µ—Ç–∞ –∏–∑ –±–∞–∑—ã:', accountsFromDb);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è —Å—á–µ—Ç–æ–≤ —Å –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç–æ–π
      const accountsWithRates = await Promise.all(
        accountsFromDb.map(async (account: Account) => {
          if (account.currency && account.currency !== defaultCurrency) {
            try {
              // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –∫—É—Ä—Å
              let rate = await ExchangeRateService.getRate(account.currency, defaultCurrency);
              
              // –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ USD
              if (!rate && account.currency !== 'USD' && defaultCurrency !== 'USD') {
                console.log(`No direct rate ${account.currency}->${defaultCurrency}, trying through USD`);
                const toUsd = await ExchangeRateService.getRate(account.currency, 'USD');
                const fromUsd = await ExchangeRateService.getRate('USD', defaultCurrency);
                
                if (toUsd && fromUsd) {
                  rate = toUsd * fromUsd;
                  console.log(`Cross rate ${account.currency}->${defaultCurrency} = ${rate} (via USD)`);
                }
              }
              
              if (rate) {
                return { ...account, exchangeRate: rate };
              }
            } catch (error) {
              console.error(`Failed to get rate for ${account.currency}:`, error);
            }
          }
          return account;
        })
      );
      
      console.log('üìä [DataContext] –°—á–µ—Ç–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç:', accountsWithRates);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAccounts(accountsWithRates);
      setTransactions(transactionsFromDb);
      setCategories(categoriesFromDb);
      setDebts(debtsFromDb);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      const total = accountsWithRates
        .filter(account => account.isIncludedInTotal !== false)
        .reduce((sum, account) => {
          let balance = account.balance;
          // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ—Å—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
          if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
            balance = account.balance * (account as any).exchangeRate;
          }
          return sum + balance;
        }, 0);
      
      console.log('üí∞ [DataContext] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:', total);
      setTotalBalance(total);
      
      console.log('‚úÖ [DataContext] RefreshData –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå [DataContext] –û—à–∏–±–∫–∞ –≤ refreshData:', error);
      console.log('‚ö†Ô∏è [DataContext] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ fallback —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...');
    }
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏
  const createAccount = async (account: Omit<Account, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!LocalDatabaseService.isDatabaseReady()) {
        console.log('[DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, —Ä–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ...');
        
        // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const newAccount: Account = {
          ...account,
          id: Date.now().toString(),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        };
        
        setAccounts(prev => [newAccount, ...prev]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        if (newAccount.isIncludedInTotal !== false) {
          let balanceToAdd = newAccount.balance;
          if (newAccount.currency && newAccount.currency !== defaultCurrency && 'exchangeRate' in newAccount && (newAccount as any).exchangeRate) {
            balanceToAdd = newAccount.balance * (newAccount as any).exchangeRate;
          }
          setTotalBalance(prev => prev + balanceToAdd);
        }
        
        console.log('[DataContext] –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ fallback —Ä–µ–∂–∏–º–µ:', newAccount);
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ SQLite, –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        try {
          if (LocalDatabaseService.isDatabaseReady()) {
            console.log('[DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç –≤ SQLite...');
            await LocalDatabaseService.createAccount(account);
            console.log('[DataContext] –°—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ SQLite');
          }
        } catch (dbError) {
          console.log('[DataContext] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ SQLite:', dbError instanceof Error ? dbError.message : String(dbError));
        }
        
        return;
      }
      
      const newAccount = await LocalDatabaseService.createAccount(account);
      setAccounts(prev => [newAccount, ...prev]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      if (newAccount.isIncludedInTotal !== false) {
        let balanceToAdd = newAccount.balance;
        // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ—Å—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
        if (newAccount.currency && newAccount.currency !== defaultCurrency && 'exchangeRate' in newAccount && (newAccount as any).exchangeRate) {
          balanceToAdd = newAccount.balance * (newAccount as any).exchangeRate;
        }
        setTotalBalance(prev => prev + balanceToAdd);
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error creating account:', error);
      throw error;
    }
  };

  const updateAccount = async (id: string, updates: Partial<Account>) => {
    try {
      const oldAccount = accounts.find(acc => acc.id === id);
      if (!oldAccount) return;
      
      console.log(`Updating account ${id} with:`, updates);
      
      await LocalDatabaseService.updateAccount(id, updates);
      setAccounts(prev => prev.map(acc => 
        acc.id === id ? { ...acc, ...updates } : acc
      ));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –±–∞–ª–∞–Ω—Å, –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      if (updates.balance !== undefined || updates.isIncludedInTotal !== undefined || 'exchangeRate' in updates) {
        const newAccount = { ...oldAccount, ...updates };
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –æ–±—â–µ–≥–æ
        let newTotalBalance = totalBalance;
        if (oldAccount.isIncludedInTotal !== false) {
          let oldConvertedBalance = oldAccount.balance;
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (oldAccount.currency && oldAccount.currency !== defaultCurrency && 'exchangeRate' in oldAccount && (oldAccount as any).exchangeRate) {
            oldConvertedBalance = oldAccount.balance * (oldAccount as any).exchangeRate;
          }
          newTotalBalance -= oldConvertedBalance;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫ –æ–±—â–µ–º—É
        if (newAccount.isIncludedInTotal !== false) {
          let newConvertedBalance = newAccount.balance;
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (newAccount.currency && newAccount.currency !== defaultCurrency && 'exchangeRate' in newAccount && (newAccount as any).exchangeRate) {
            newConvertedBalance = newAccount.balance * (newAccount as any).exchangeRate;
          }
          newTotalBalance += newConvertedBalance;
        }
        
        setTotalBalance(newTotalBalance);
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error updating account:', error);
      throw error;
    }
  };

  const deleteAccount = async (id: string) => {
    try {
      const accountToDelete = accounts.find(acc => acc.id === id);
      if (!accountToDelete) return;
      
      await LocalDatabaseService.deleteAccount(id);
      setAccounts(prev => prev.filter(acc => acc.id !== id));
      setTransactions(prev => prev.filter(trans => trans.accountId !== id));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ —Å—á–µ—Ç –±—ã–ª –≤–∫–ª—é—á–µ–Ω –≤ –Ω–µ–≥–æ
      if (accountToDelete.isIncludedInTotal !== false) {
        let balanceToRemove = accountToDelete.balance;
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π
        if (accountToDelete.currency && accountToDelete.currency !== defaultCurrency && 'exchangeRate' in accountToDelete && (accountToDelete as any).exchangeRate) {
          balanceToRemove = accountToDelete.balance * (accountToDelete as any).exchangeRate;
        }
        setTotalBalance(prev => prev - balanceToRemove);
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error deleting account:', error);
      throw error;
    }
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
  const createTransaction = async (transaction: Omit<Transaction, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!LocalDatabaseService.isDatabaseReady()) {
        console.log('[DataContext] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ fallback —Ä–µ–∂–∏–º–µ...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const newTransaction: Transaction = {
          ...transaction,
          id: Date.now().toString(),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        };
        
        setTransactions(prev => [newTransaction, ...prev]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
        const account = accounts.find(acc => acc.id === transaction.accountId);
        if (account) {
          const balanceChange = transaction.type === 'income' ? transaction.amount : -transaction.amount;
          setAccounts(prev => prev.map(acc => 
            acc.id === transaction.accountId 
              ? { ...acc, balance: acc.balance + balanceChange }
              : acc
          ));
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
          if (account.isIncludedInTotal !== false) {
            let balanceChangeConverted = balanceChange;
            if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
              balanceChangeConverted = balanceChange * (account as any).exchangeRate;
            }
            setTotalBalance(prev => prev + balanceChangeConverted);
          }
        }
        
        console.log('[DataContext] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ fallback —Ä–µ–∂–∏–º–µ:', newTransaction);
        return;
      }
      
      const newTransaction = await LocalDatabaseService.createTransaction(transaction);
      setTransactions(prev => [newTransaction, ...prev]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
      const account = accounts.find(acc => acc.id === transaction.accountId);
      if (account) {
        const balanceChange = transaction.type === 'income' ? transaction.amount : -transaction.amount;
        setAccounts(prev => prev.map(acc => 
          acc.id === transaction.accountId 
            ? { ...acc, balance: acc.balance + balanceChange }
            : acc
        ));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        if (account.isIncludedInTotal !== false) {
          let balanceChangeConverted = balanceChange;
          if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
            balanceChangeConverted = balanceChange * (account as any).exchangeRate;
          }
          setTotalBalance(prev => prev + balanceChangeConverted);
        }
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error creating transaction:', error);
      throw error;
    }
  };

  const updateTransaction = async (id: string, updates: Partial<Transaction>) => {
    try {
      const oldTransaction = transactions.find(t => t.id === id);
      if (!oldTransaction) return;
      
      await LocalDatabaseService.updateTransaction(id, oldTransaction, updates);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setTransactions(prev => prev.map(trans => 
        trans.id === id ? { ...trans, ...updates } : trans
      ));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Å—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (updates.amount !== undefined || updates.type !== undefined || updates.accountId !== undefined) {
        await refreshData(); // –ü—Ä–æ—â–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error updating transaction:', error);
      throw error;
    }
  };

  const deleteTransaction = async (id: string) => {
    try {
      const transaction = transactions.find(t => t.id === id);
      if (!transaction) return;
      
      await LocalDatabaseService.deleteTransaction(transaction);
      
      // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setTransactions(prev => prev.filter(trans => trans.id !== id));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
      const account = accounts.find(acc => acc.id === transaction.accountId);
      if (account) {
        const balanceChange = transaction.type === 'income' ? -transaction.amount : transaction.amount;
        setAccounts(prev => prev.map(acc => 
          acc.id === transaction.accountId 
            ? { ...acc, balance: acc.balance + balanceChange }
            : acc
        ));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ —Å—á–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ –Ω–µ–≥–æ
        if (account.isIncludedInTotal !== false) {
          let convertedBalanceChange = balanceChange;
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π
          if (account.currency && account.currency !== defaultCurrency && 'exchangeRate' in account && (account as any).exchangeRate) {
            convertedBalanceChange = balanceChange * (account as any).exchangeRate;
          }
          setTotalBalance(prev => prev + convertedBalanceChange);
        }
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error deleting transaction:', error);
      throw error;
    }
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  const createCategory = async (category: Omit<Category, 'id'>) => {
    try {
      const newCategory = await LocalDatabaseService.createCategory(category);
      setCategories(prev => [newCategory, ...prev]);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error creating category:', error);
      throw error;
    }
  };

  const updateCategory = async (id: string, updates: Partial<Category>) => {
    try {
      await LocalDatabaseService.updateCategory(id, updates);
      setCategories(prev => prev.map(cat => 
        cat.id === id ? { ...cat, ...updates } : cat
      ));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error updating category:', error);
      throw error;
    }
  };

  const deleteCategory = async (id: string) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–æ–µ"
      if (id === 'other_income' || id === 'other_expense') {
        throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      }
      
      await LocalDatabaseService.deleteCategory(id);
      setCategories(prev => prev.filter(cat => cat.id !== id));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      const deletedCategory = categories.find(cat => cat.id === id);
      if (deletedCategory) {
        const fallbackCategory = categories.find(cat =>
          cat.type === deletedCategory.type && cat.name.toLowerCase() === '–¥—Ä—É–≥–æ–µ'
        );
      
        if (!fallbackCategory) {
          throw new Error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–æ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      
        setTransactions(prev => prev.map(trans =>
          trans.categoryId === id ? { ...trans, categoryId: fallbackCategory.id } : trans
        ));
      }        
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error deleting category:', error);
      throw error;
    }
  };

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  const addToSavings = async (savingsId: string, amount: number) => {
    try {
      const savingsAccount = accounts.find(acc => acc.id === savingsId);
      if (!savingsAccount) throw new Error('Savings account not found');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
      await LocalDatabaseService.updateAccount(savingsId, {
        savedAmount: (savingsAccount.savedAmount || 0) + amount
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAccounts(prev => prev.map(acc => 
        acc.id === savingsId 
          ? { ...acc, savedAmount: (acc.savedAmount || 0) + amount }
          : acc
      ));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error adding to savings:', error);
      throw error;
    }
  };
  
  // –°–Ω—è—Ç–∏–µ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  const withdrawFromSavings = async (savingsId: string, amount: number) => {
    try {
      const savingsAccount = accounts.find(acc => acc.id === savingsId);
      if (!savingsAccount) throw new Error('Savings account not found');
      
      const currentSavedAmount = savingsAccount.savedAmount || 0;
      if (currentSavedAmount < amount) {
        throw new Error('Insufficient savings amount');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
      await LocalDatabaseService.updateAccount(savingsId, {
        savedAmount: currentSavedAmount - amount
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAccounts(prev => prev.map(acc => 
        acc.id === savingsId 
          ? { ...acc, savedAmount: currentSavedAmount - amount }
          : acc
      ));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error withdrawing from savings:', error);
      throw error;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const getStatistics = (startDate?: Date, endDate?: Date) => {
    let filteredTransactions = transactions;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (startDate || endDate) {
      filteredTransactions = transactions.filter(t => {
        const transDate = new Date(t.date);
        if (startDate && transDate < startDate) return false;
        if (endDate && transDate > endDate) return false;
        return true;
      });
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏
    const income = filteredTransactions
      .filter(t => t.type === 'income' && !t.description?.includes('–°–Ω—è—Ç–∏–µ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:'))
      .reduce((sum, t) => sum + t.amount, 0);
    
    const expense = filteredTransactions
      .filter(t => t.type === 'expense' && !t.description?.includes('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:'))
      .reduce((sum, t) => sum + t.amount, 0);
    
    return { income, expense };
  };
  
  // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const resetAllData = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (!userId) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
      
      await LocalDatabaseService.resetAllData(defaultCurrency);
      await refreshData();
    } catch (error) {
      console.error('Error resetting data:', error);
      // –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
      if (error instanceof Error && error.message.includes('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')) {
        try {
          await initializeApp();
        } catch (initError) {
          console.error('Failed to reinitialize database:', initError);
        }
      }
      throw error;
    }
  };

  const createDebt = async (debt: Omit<Debt, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      const newDebt = await LocalDatabaseService.createDebt(debt);
      setDebts(prev => [newDebt, ...prev]);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error creating debt:', error);
      throw error;
    }
  };

  const updateDebt = async (id: string, updates: Partial<Debt>) => {
    try {
      await LocalDatabaseService.updateDebt(id, updates);
      setDebts(prev => prev.map(debt => 
        debt.id === id ? { ...debt, ...updates } : debt
      ));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error updating debt:', error);
      throw error;
    }
  };

  const deleteDebt = async (id: string) => {
    try {
      await LocalDatabaseService.deleteDebt(id);
      setDebts(prev => prev.filter(debt => debt.id !== id));
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend
      await syncData();
    } catch (error) {
      console.error('Error deleting debt:', error);
      throw error;
    }
  };

  return (
    <DataContext.Provider
      value={{
        accounts,
        transactions,
        categories,
        debts,
        totalBalance,
        isLoading,
        lastSyncTime,
        isSyncing,
        createAccount,
        updateAccount,
        deleteAccount,
        createTransaction,
        updateTransaction,
        deleteTransaction,
        addToSavings,
        withdrawFromSavings,
        createCategory,
        updateCategory,
        deleteCategory,
        refreshData,
        resetAllData,
        syncData,
        getStatistics,
        createDebt,
        updateDebt,
        deleteDebt,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => {
  const context = useContext(DataContext);
  if (!context) {
    throw new Error('useData must be used within DataProvider');
  }
  return context;
}; 