import { useState, useCallback, useRef } from 'react';
import { Platform } from 'react-native';

interface UseDatePickerOptions {
  onDateChange?: (date: Date) => void;
  initialDate?: Date;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DateTimePicker
 * –†–µ—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã –Ω–∞ Android
 */
export const useDatePicker = (options?: UseDatePickerOptions) => {
  const { onDateChange, initialDate } = options || {};
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date>(initialDate || new Date());
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π
  const isOpeningRef = useRef(false);
  const lastOpenTimeRef = useRef(0);
  
  const openDatePicker = useCallback(() => {
    const now = Date.now();
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 500ms
    if (now - lastOpenTimeRef.current < 500) {
      console.log('üö´ [useDatePicker] Blocked: Too fast consecutive calls');
      return;
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (isOpeningRef.current) {
      console.log('üö´ [useDatePicker] Blocked: Already opening');
      return;
    }
    
    console.log('‚úÖ [useDatePicker] Opening DatePicker');
    isOpeningRef.current = true;
    lastOpenTimeRef.current = now;
    setShowDatePicker(true);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      isOpeningRef.current = false;
    }, 100);
  }, []);
  
  const closeDatePicker = useCallback(() => {
    console.log('‚úÖ [useDatePicker] Closing DatePicker');
    isOpeningRef.current = false;
    setShowDatePicker(false);
  }, []);
  
  const handleDateChange = useCallback((event: any, date?: Date) => {
    console.log('üìÖ [useDatePicker] DatePicker onChange:', {
      eventType: event?.type,
      date: date?.toISOString(),
      platform: Platform.OS,
      nativeEvent: event?.nativeEvent
    });
    
    // –í–ê–ñ–ù–û: –ù–∞ Android –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∏–∫–µ—Ä –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã
    if (Platform.OS === 'android') {
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Android:
      // 1. –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏–µ –ù–ï dismissed - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
      // 2. –ï—Å–ª–∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è undefined (–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö) - —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      if (date) {
        const shouldSetDate = event?.type === 'set' || 
                             event?.type === undefined ||
                             (event?.type !== 'dismissed' && event?.type !== 'cancel');
        
        if (shouldSetDate) {
          console.log('‚úÖ [useDatePicker] Setting date:', date.toISOString());
          setSelectedDate(date);
          onDateChange?.(date);
        } else {
          console.log('‚ùå [useDatePicker] Date selection cancelled');
        }
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∏–∫–µ—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        closeDatePicker();
      }, 50);
    } else {
      // iOS: –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (date) {
        console.log('‚úÖ [useDatePicker] Setting date (iOS):', date.toISOString());
        setSelectedDate(date);
        onDateChange?.(date);
      }
    }
  }, [onDateChange, closeDatePicker]);
  
  const resetProtection = useCallback(() => {
    console.log('üîÑ [useDatePicker] Reset protection state');
    isOpeningRef.current = false;
    lastOpenTimeRef.current = 0;
  }, []);
  
  return {
    showDatePicker,
    selectedDate,
    openDatePicker,
    closeDatePicker,
    handleDateChange,
    setSelectedDate,
    resetProtection,
  };
};
