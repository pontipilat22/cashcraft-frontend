export interface Currency {
  code: string;
  symbol: string;
  name: string;
  decimal: number;
  position: 'before' | 'after';
  space: boolean;
  thousandSeparator: string;
  decimalSeparator: string;
}

export const CURRENCIES: Record<string, Currency> = {
  USD: {
    code: 'USD',
    symbol: '$',
    name: 'US Dollar',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  EUR: {
    code: 'EUR',
    symbol: '€',
    name: 'Euro',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  GBP: {
    code: 'GBP',
    symbol: '£',
    name: 'British Pound',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  RUB: {
    code: 'RUB',
    symbol: '₽',
    name: 'Russian Ruble',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  JPY: {
    code: 'JPY',
    symbol: '¥',
    name: 'Japanese Yen',
    decimal: 0,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  CNY: {
    code: 'CNY',
    symbol: '¥',
    name: 'Chinese Yuan',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  INR: {
    code: 'INR',
    symbol: '₹',
    name: 'Indian Rupee',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  BRL: {
    code: 'BRL',
    symbol: 'R$',
    name: 'Brazilian Real',
    decimal: 2,
    position: 'before',
    space: true,
    thousandSeparator: '.',
    decimalSeparator: ',',
  },
  CAD: {
    code: 'CAD',
    symbol: 'C$',
    name: 'Canadian Dollar',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  AUD: {
    code: 'AUD',
    symbol: 'A$',
    name: 'Australian Dollar',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  KRW: {
    code: 'KRW',
    symbol: '₩',
    name: 'South Korean Won',
    decimal: 0,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  MXN: {
    code: 'MXN',
    symbol: '$',
    name: 'Mexican Peso',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  TRY: {
    code: 'TRY',
    symbol: '₺',
    name: 'Turkish Lira',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: '.',
    decimalSeparator: ',',
  },
  UAH: {
    code: 'UAH',
    symbol: '₴',
    name: 'Ukrainian Hryvnia',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  PLN: {
    code: 'PLN',
    symbol: 'zł',
    name: 'Polish Zloty',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  THB: {
    code: 'THB',
    symbol: '฿',
    name: 'Thai Baht',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  SGD: {
    code: 'SGD',
    symbol: 'S$',
    name: 'Singapore Dollar',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  CHF: {
    code: 'CHF',
    symbol: 'Fr.',
    name: 'Swiss Franc',
    decimal: 2,
    position: 'before',
    space: true,
    thousandSeparator: "'",
    decimalSeparator: '.',
  },
  KZT: {
    code: 'KZT',
    symbol: '₸',
    name: 'Kazakhstani Tenge',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  BYN: {
    code: 'BYN',
    symbol: 'Br',
    name: 'Belarusian Ruble',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  UZS: {
    code: 'UZS',
    symbol: "so'm",
    name: 'Uzbekistani Som',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  GEL: {
    code: 'GEL',
    symbol: '₾',
    name: 'Georgian Lari',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  AMD: {
    code: 'AMD',
    symbol: '֏',
    name: 'Armenian Dram',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  AZN: {
    code: 'AZN',
    symbol: '₼',
    name: 'Azerbaijani Manat',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  // Добавляем остальные валюты с базовыми настройками
  SAR: {
    code: 'SAR',
    symbol: 'SR',
    name: 'Saudi Riyal',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  AED: {
    code: 'AED',
    symbol: 'د.إ',
    name: 'UAE Dirham',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  IDR: {
    code: 'IDR',
    symbol: 'Rp',
    name: 'Indonesian Rupiah',
    decimal: 0,
    position: 'before',
    space: true,
    thousandSeparator: '.',
    decimalSeparator: ',',
  },
  MYR: {
    code: 'MYR',
    symbol: 'RM',
    name: 'Malaysian Ringgit',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  VND: {
    code: 'VND',
    symbol: '₫',
    name: 'Vietnamese Dong',
    decimal: 0,
    position: 'after',
    space: true,
    thousandSeparator: '.',
    decimalSeparator: ',',
  },
  PHP: {
    code: 'PHP',
    symbol: '₱',
    name: 'Philippine Peso',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  NZD: {
    code: 'NZD',
    symbol: 'NZ$',
    name: 'New Zealand Dollar',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  HKD: {
    code: 'HKD',
    symbol: 'HK$',
    name: 'Hong Kong Dollar',
    decimal: 2,
    position: 'before',
    space: false,
    thousandSeparator: ',',
    decimalSeparator: '.',
  },
  SEK: {
    code: 'SEK',
    symbol: 'kr',
    name: 'Swedish Krona',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  NOK: {
    code: 'NOK',
    symbol: 'kr',
    name: 'Norwegian Krone',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  DKK: {
    code: 'DKK',
    symbol: 'kr',
    name: 'Danish Krone',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: '.',
    decimalSeparator: ',',
  },
  CZK: {
    code: 'CZK',
    symbol: 'Kč',
    name: 'Czech Koruna',
    decimal: 2,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
  HUF: {
    code: 'HUF',
    symbol: 'Ft',
    name: 'Hungarian Forint',
    decimal: 0,
    position: 'after',
    space: true,
    thousandSeparator: ' ',
    decimalSeparator: ',',
  },
};

// Функция для форматирования суммы в нужной валюте
export const formatCurrency = (amount: number, currencyCode: string): string => {
  const currency = CURRENCIES[currencyCode] || CURRENCIES.USD;
  
  // Форматируем число
  const fixed = amount.toFixed(currency.decimal);
  const parts = fixed.split('.');
  const integerPart = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, currency.thousandSeparator);
  const formattedNumber = currency.decimal > 0 
    ? `${integerPart}${currency.decimalSeparator}${parts[1]}`
    : integerPart;
  
  // Добавляем символ валюты
  if (currency.position === 'before') {
    return currency.space 
      ? `${currency.symbol} ${formattedNumber}`
      : `${currency.symbol}${formattedNumber}`;
  } else {
    return currency.space
      ? `${formattedNumber} ${currency.symbol}`
      : `${formattedNumber}${currency.symbol}`;
  }
};

// Функция для получения валюты по коду страны
export const getCurrencyByCountry = (countryCode: string): string => {
  const countryToCurrency: Record<string, string> = {
    US: 'USD',
    GB: 'GBP',
    EU: 'EUR',
    JP: 'JPY',
    CN: 'CNY',
    RU: 'RUB',
    IN: 'INR',
    BR: 'BRL',
    CA: 'CAD',
    AU: 'AUD',
    KR: 'KRW',
    MX: 'MXN',
    TR: 'TRY',
    UA: 'UAH',
    PL: 'PLN',
    TH: 'THB',
    SG: 'SGD',
    CH: 'CHF',
    KZ: 'KZT',
    BY: 'BYN',
    UZ: 'UZS',
    GE: 'GEL',
    AM: 'AMD',
    AZ: 'AZN',
    SA: 'SAR',
    AE: 'AED',
    ID: 'IDR',
    MY: 'MYR',
    VN: 'VND',
    PH: 'PHP',
    NZ: 'NZD',
    HK: 'HKD',
    SE: 'SEK',
    NO: 'NOK',
    DK: 'DKK',
    CZ: 'CZK',
    HU: 'HUF',
    // Европейские страны используют EUR
    DE: 'EUR',
    FR: 'EUR',
    IT: 'EUR',
    ES: 'EUR',
    NL: 'EUR',
    BE: 'EUR',
    AT: 'EUR',
    PT: 'EUR',
    GR: 'EUR',
    FI: 'EUR',
    IE: 'EUR',
  };
  
  return countryToCurrency[countryCode] || 'USD';
}; 