import { 
  initConnection, 
  endConnection, 
  getSubscriptions, 
  requestPurchase,
  requestSubscription,
  getAvailablePurchases,
  finishTransaction,
  type SubscriptionProduct,
  type Purchase 
} from 'expo-iap';
import { Platform } from 'react-native';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
export const SUBSCRIPTION_SKUS = {
  MONTHLY: 'cashcraft_monthly',
  YEARLY: 'cashcraft_yearly',
} as const;

export type SubscriptionSKU = typeof SUBSCRIPTION_SKUS[keyof typeof SUBSCRIPTION_SKUS];

// –ù–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
export interface PurchaseResult {
  purchaseId: string;
  productId: string;
  transactionId: string;
  transactionDate: number;
  transactionReceipt: string;
  orderId?: string;
  isAcknowledged?: boolean;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ expo-iap
 */
class IAPService {
  private isInitialized = false;
  private isConnected = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫—É–ø–æ–∫
   */
  async initialize(): Promise<boolean> {
    try {
      console.log('üîÑ [IAPService] Initializing...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ store
      const result = await initConnection();
      this.isConnected = result;
      
      if (this.isConnected) {
        console.log('‚úÖ [IAPService] Connected to store');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        const products = await this.getProducts();
        console.log('üì¶ [IAPService] Available products:', products.length);
        
        this.isInitialized = true;
        return true;
      } else {
        console.log('‚ùå [IAPService] Failed to connect to store');
        return false;
      }
    } catch (error) {
      console.error('‚ùå [IAPService] Initialization failed:', error);
      this.isInitialized = false;
      this.isConnected = false;
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–¥–ø–∏—Å–æ–∫)
   */
  async getProducts(): Promise<SubscriptionProduct[]> {
    try {
      if (!this.isConnected) {
        throw new Error('IAPService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const skus = Object.values(SUBSCRIPTION_SKUS);
      console.log('üîç [IAPService] Getting products for SKUs:', skus);
      
      const products = await getSubscriptions(skus);
      console.log('üì¶ [IAPService] Retrieved products:', products);

      return products;
    } catch (error) {
      console.error('‚ùå [IAPService] Failed to get products:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async purchaseProduct(productId: SubscriptionSKU): Promise<PurchaseResult | null> {
    try {
      if (!this.isInitialized) {
        throw new Error('IAPService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      console.log('üí≥ [IAPService] Purchasing subscription:', productId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º deprecated –º–µ—Ç–æ–¥ requestSubscription —Å –±–∞–∑–æ–≤—ã–º offerToken
      const result = await requestSubscription({
        ios: { sku: productId },
        android: { 
          skus: [productId],
          subscriptionOffers: [{
            sku: productId,
            offerToken: 'default' // –ü—Ä–æ–±—É–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
          }]
        }
      });
      
      console.log('‚úÖ [IAPService] Purchase result:', result);

      // result –º–æ–∂–µ—Ç –±—ã—Ç—å Purchase, Purchase[] –∏–ª–∏ void
      const purchase = Array.isArray(result) ? result[0] : result;
      
      if (purchase && purchase.transactionId) {
        const purchaseResult: PurchaseResult = {
          purchaseId: purchase.transactionId,
          productId: productId,
          transactionId: purchase.transactionId,
          transactionDate: Date.now(),
          transactionReceipt: purchase.transactionReceipt || '',
          // orderId –∏ isAcknowledged –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–º API
        };

        // –î–ª—è Android –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
        if (Platform.OS === 'android') {
          await this.acknowledgePurchase(purchase);
        }

        return purchaseResult;
      }

      return null;
    } catch (error) {
      console.error('‚ùå [IAPService] Purchase failed:', error);
      throw error;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
   */
  async restorePurchases(): Promise<PurchaseResult[]> {
    try {
      if (!this.isInitialized) {
        throw new Error('IAPService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      console.log('üîÑ [IAPService] Restoring purchases...');
      
      const purchases = await getAvailablePurchases();
      console.log('üìú [IAPService] Available purchases:', purchases);

      return purchases.map(purchase => ({
        purchaseId: purchase.transactionId || '',
        productId: purchase.productId,
        transactionId: purchase.transactionId || '',
        transactionDate: purchase.transactionDate || Date.now(),
        transactionReceipt: purchase.transactionReceipt || '',
      }));
    } catch (error) {
      console.error('‚ùå [IAPService] Failed to restore purchases:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  async getActiveSubscriptions(): Promise<PurchaseResult[]> {
    try {
      if (!this.isInitialized) {
        throw new Error('IAPService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      console.log('üîç [IAPService] Getting active subscriptions...');
      
      const subscriptions = await getAvailablePurchases();
      console.log('üìã [IAPService] Available subscriptions:', subscriptions);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      const ourSubscriptions = subscriptions.filter(sub => 
        Object.values(SUBSCRIPTION_SKUS).includes(sub.productId as SubscriptionSKU)
      );

      return ourSubscriptions.map(subscription => ({
        purchaseId: subscription.transactionId || '',
        productId: subscription.productId,
        transactionId: subscription.transactionId || '',
        transactionDate: subscription.transactionDate || Date.now(),
        transactionReceipt: subscription.transactionReceipt || '',
      }));
    } catch (error) {
      console.error('‚ùå [IAPService] Failed to get active subscriptions:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (–¥–ª—è Android)
   */
  private async acknowledgePurchase(purchase: Purchase): Promise<void> {
    try {
      if (Platform.OS === 'android') {
        console.log('‚úÖ [IAPService] Acknowledging purchase:', purchase.transactionId);
        
        await finishTransaction({ 
          purchase: purchase, 
          isConsumable: false 
        });
        
        console.log('‚úÖ [IAPService] Purchase acknowledged');
      }
    } catch (error) {
      console.error('‚ùå [IAPService] Failed to acknowledge purchase:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–æ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
   */
  async isAvailable(): Promise<boolean> {
    try {
      // –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ expo-iap –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ isAvailable
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      return this.isConnected;
    } catch (error) {
      console.error('‚ùå [IAPService] Failed to check availability:', error);
      return false;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç store
   */
  async disconnect(): Promise<void> {
    try {
      if (this.isConnected) {
        await endConnection();
        this.isConnected = false;
        this.isInitialized = false;
        console.log('‚úÖ [IAPService] Disconnected from store');
      }
    } catch (error) {
      console.error('‚ùå [IAPService] Failed to disconnect:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  get initialized(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  get connected(): boolean {
    return this.isConnected;
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
export const iapService = new IAPService();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const IAPHelpers = {
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ ID
   */
  getSubscriptionName(productId: SubscriptionSKU): string {
    switch (productId) {
      case SUBSCRIPTION_SKUS.MONTHLY:
        return '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞';
      case SUBSCRIPTION_SKUS.YEARLY:
        return '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞';
      default:
        return '–ü–æ–¥–ø–∏—Å–∫–∞';
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö
   */
  getSubscriptionDuration(productId: SubscriptionSKU): number {
    switch (productId) {
      case SUBSCRIPTION_SKUS.MONTHLY:
        return 30;
      case SUBSCRIPTION_SKUS.YEARLY:
        return 365;
      default:
        return 30;
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ receipt –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  validateReceipt(receipt: string): boolean {
    return !!(receipt && receipt.length > 0);
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
   */
  isSubscriptionActive(transactionDate: number, duration: number): boolean {
    const now = Date.now();
    const expireDate = transactionDate + (duration * 24 * 60 * 60 * 1000);
    return now < expireDate;
  }
};

export default iapService;