/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π, —á–∞—Å—Ç–∏—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ
 */

import database from '../database';
import CreditPaymentSchedule from '../database/models/CreditPaymentSchedule';
import Account from '../database/models/Account';
import { Q } from '@nozbe/watermelondb';
import {
  recalculateScheduleAfterEarlyPayment,
  CreditParams,
  PaymentScheduleItem,
} from './CreditCalculationService';

export interface MarkPaymentParams {
  scheduleItemId: string;
  paidAmount?: number; // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –ø–æ–ª–Ω–∞—è —Å—É–º–º–∞
  paidDate?: Date; // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
}

export interface PartialPaymentParams {
  scheduleItemId: string;
  paidAmount: number;
  paidDate?: Date;
}

export interface EarlyRepaymentParams {
  accountId: string;
  amount: number;
  repaymentDate?: Date;
}

/**
 * –û—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ)
 */
export async function markPaymentAsPaid(params: MarkPaymentParams): Promise<void> {
  const { scheduleItemId, paidAmount, paidDate } = params;

  await database.write(async () => {
    const scheduleItem = await database.get<CreditPaymentSchedule>('credit_payment_schedules').find(scheduleItemId);

    const actualPaidAmount = paidAmount ?? scheduleItem.totalPayment;
    const actualPaidDate = paidDate ?? new Date();

    await scheduleItem.update((record: any) => {
      record.paidAmount = actualPaidAmount;
      record.paidDate = actualPaidDate.toISOString();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (actualPaidAmount >= scheduleItem.totalPayment) {
        record.status = 'paid';
      } else if (actualPaidAmount > 0 && actualPaidAmount < scheduleItem.totalPayment) {
        record.status = 'partial';
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
    await updateAccountBalance(scheduleItem.accountId);
  });
}

/**
 * –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂
 */
export async function makePartialPayment(params: PartialPaymentParams): Promise<void> {
  const { scheduleItemId, paidAmount, paidDate } = params;

  if (paidAmount <= 0) {
    throw new Error('–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
  }

  await database.write(async () => {
    const scheduleItem = await database.get<CreditPaymentSchedule>('credit_payment_schedules').find(scheduleItemId);

    if (paidAmount > scheduleItem.totalPayment) {
      throw new Error('–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –ø–æ –≥—Ä–∞—Ñ–∏–∫—É');
    }

    const currentPaidAmount = scheduleItem.paidAmount || 0;
    const newTotalPaid = currentPaidAmount + paidAmount;

    await scheduleItem.update((record: any) => {
      record.paidAmount = newTotalPaid;
      record.paidDate = (paidDate ?? new Date()).toISOString();

      if (newTotalPaid >= scheduleItem.totalPayment) {
        record.status = 'paid';
      } else {
        record.status = 'partial';
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
    await updateAccountBalance(scheduleItem.accountId);
  });
}

/**
 * –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—Å—á—ë—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–∞
 * –õ–æ–≥–∏–∫–∞: –≤–Ω–µ—Å—ë–Ω–Ω–∞—è —Å—É–º–º–∞ –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –æ—Å—Ç–∞—Ç–∫–∞, –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
 */
export async function makeEarlyRepayment(params: EarlyRepaymentParams): Promise<void> {
  const { accountId, amount, repaymentDate } = params;

  console.log('üí≥ [CreditOperations] –ù–∞—á–∞–ª–æ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:');
  console.log('  - –°—É–º–º–∞:', amount);
  console.log('  - ID –∫—Ä–µ–¥–∏—Ç–∞:', accountId);

  if (amount <= 0) {
    throw new Error('–°—É–º–º–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
  }

  await database.write(async () => {
    const account = await database.get<Account>('accounts').find(accountId);

    if (account.type !== 'credit') {
      throw new Error('–°—á—ë—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–µ–¥–∏—Ç–Ω—ã–º');
    }

    const actualDate = repaymentDate ?? new Date();
    console.log('  - –ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞:', account.name);
    console.log('  - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–¥–æ–ª–≥):', account.balance);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
    const scheduleCollection = database.get<CreditPaymentSchedule>('credit_payment_schedules');
    const allPayments = await scheduleCollection
      .query(Q.where('account_id', accountId), Q.sortBy('payment_number', Q.asc))
      .fetch();

    if (allPayments.length === 0) {
      throw new Error('–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂
    const paidPayments = allPayments.filter(p => p.status === 'paid');
    const lastPaidPaymentNumber = paidPayments.length > 0
      ? paidPayments[paidPayments.length - 1].paymentNumber
      : 0;

    console.log('  - –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ:', allPayments.length);
    console.log('  - –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', paidPayments.length);
    console.log('  - –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π:', lastPaidPaymentNumber);

    // –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è (—Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ)
    const earlyPaymentMonth = lastPaidPaymentNumber + 1;
    console.log('  - –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –º–µ—Å—è—Ü—É:', earlyPaymentMonth);

    // –ù–∞—Ö–æ–¥–∏–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
    const paymentBeforeEarly = allPayments.find(p => p.paymentNumber === earlyPaymentMonth - 1);
    const currentBalance = paymentBeforeEarly
      ? paymentBeforeEarly.remainingBalance
      : (account.creditInitialAmount || 0);

    if (amount > currentBalance) {
      throw new Error('–°—É–º–º–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞');
    }

    // –ï—Å–ª–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ (–∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–ø–µ–π–∫–∏)
    const remainingAfterPayment = currentBalance - amount;
    if (remainingAfterPayment < 1) {
      console.log('‚úÖ –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Å—å –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞!');
      console.log('  - –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–≥–∞—à–µ–Ω–∏—è:', remainingAfterPayment, '(–º–µ–Ω–µ–µ 1, —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è)');
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
      const pendingPayments = allPayments.filter(p => p.status === 'pending');
      console.log('  - –£–¥–∞–ª—è–µ–º', pendingPayments.length, '–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
      for (const payment of pendingPayments) {
        await payment.markAsDeleted();
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ 0 (–∫—Ä–µ–¥–∏—Ç –∑–∞–∫—Ä—ã—Ç)
      await account.update((record: any) => {
        record.balance = 0;
      });
      console.log('üéâ –ö—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!');
      return;
    }

    // –ì–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞
    const creditParams: CreditParams = {
      principal: account.creditInitialAmount || 0,
      annualRate: account.creditRate || 0,
      termMonths: account.creditTerm || 0,
      paymentType: (account.creditPaymentType as 'annuity' | 'differentiated') || 'annuity',
      startDate: new Date(account.creditStartDate || new Date()),
    };

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç PaymentScheduleItem
    const originalSchedule: PaymentScheduleItem[] = allPayments.map(p => ({
      paymentNumber: p.paymentNumber,
      paymentDate: new Date(p.paymentDate),
      principalPayment: p.principalPayment,
      interestPayment: p.interestPayment,
      totalPayment: p.totalPayment,
      remainingBalance: p.remainingBalance,
    }));

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞...');
    const newSchedule = recalculateScheduleAfterEarlyPayment(
      originalSchedule,
      amount,
      earlyPaymentMonth,
      creditParams
    );

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –ë–î
    const pendingPayments = allPayments.filter(p => p.status === 'pending');
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:', pendingPayments.length, '—à—Ç.');
    for (const payment of pendingPayments) {
      await payment.markAsDeleted();
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏:', newSchedule.length, '—à—Ç.');
    for (const item of newSchedule) {
      await scheduleCollection.create((record: any) => {
        record.accountId = accountId;
        record.paymentNumber = item.paymentNumber;
        record.paymentDate = item.paymentDate.toISOString();
        record.principalPayment = item.principalPayment;
        record.interestPayment = item.interestPayment;
        record.totalPayment = item.totalPayment;
        record.remainingBalance = item.remainingBalance;
        record.paidAmount = 0;
        record.status = 'pending';
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
    console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ...');
    await updateAccountBalance(accountId);
    console.log('‚úÖ [CreditOperations] –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  });
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
 * –í–ê–ñ–ù–û: –ë–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–∞ = –æ—Å—Ç–∞—Ç–æ–∫ –û–°–ù–û–í–ù–û–ì–û –¥–æ–ª–≥–∞, –∞ –Ω–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)
 */
export async function updateAccountBalance(accountId: string): Promise<void> {
  const scheduleCollection = database.get<CreditPaymentSchedule>('credit_payment_schedules');
  const allPayments = await scheduleCollection
    .query(Q.where('account_id', accountId), Q.sortBy('payment_number', Q.asc))
    .fetch();

  if (allPayments.length === 0) {
    return;
  }

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –û–ü–õ–ê–ß–ï–ù–ù–´–ô –ø–ª–∞—Ç—ë–∂
  const paidPayments = allPayments.filter(p => p.status === 'paid');

  let remainingDebt: number;

  if (paidPayments.length === 0) {
    // –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π - –±–µ—Ä—ë–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞
    const account = await database.get<Account>('accounts').find(accountId);
    remainingDebt = account.creditInitialAmount || 0;
  } else {
    // –ë–µ—Ä—ë–º remainingBalance –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    const lastPaidPayment = paidPayments[paidPayments.length - 1];
    remainingDebt = lastPaidPayment.remainingBalance;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º balance –≤ Account
  // –î–ª—è –∫—Ä–µ–¥–∏—Ç–∞ balance —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–æ–ª–≥)
  const account = await database.get<Account>('accounts').find(accountId);
  await account.update((record: any) => {
    record.balance = -remainingDebt;
  });
}

/**
 * –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–∫
 * –û—Ç–º–µ—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ "overdue" –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –∞ —Å—Ç–∞—Ç—É—Å "pending"
 */
export async function updateOverduePayments(accountId: string): Promise<void> {
  const now = new Date();

  await database.write(async () => {
    const scheduleCollection = database.get<CreditPaymentSchedule>('credit_payment_schedules');
    const pendingPayments = await scheduleCollection
      .query(
        Q.where('account_id', accountId),
        Q.where('status', 'pending')
      )
      .fetch();

    for (const payment of pendingPayments) {
      const paymentDate = new Date(payment.paymentDate);

      if (paymentDate < now) {
        await payment.update((record: any) => {
          record.status = 'overdue';
        });
      }
    }
  });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫—Ä–µ–¥–∏—Ç—É
 */
export interface CreditStats {
  totalPayable: number;
  paidAmount: number;
  remainingBalance: number;
  nextPaymentDate: Date | null;
  nextPaymentAmount: number;
  overdueCount: number;
  completedCount: number;
}

export async function getCreditStats(accountId: string): Promise<CreditStats> {
  const scheduleCollection = database.get<CreditPaymentSchedule>('credit_payment_schedules');
  const allPayments = await scheduleCollection
    .query(Q.where('account_id', accountId), Q.sortBy('payment_number', Q.asc))
    .fetch();

  const totalPayable = allPayments.reduce((sum, p) => sum + p.totalPayment, 0);

  const paidPayments = allPayments.filter(p => p.status === 'paid');
  const paidAmount = paidPayments.reduce((sum, p) => sum + (p.paidAmount || p.totalPayment), 0);

  const partialPayments = allPayments.filter(p => p.status === 'partial');
  const partialPaid = partialPayments.reduce((sum, p) => sum + (p.paidAmount || 0), 0);

  const totalPaid = paidAmount + partialPaid;
  const remainingBalance = totalPayable - totalPaid;

  const nextPayment = allPayments.find(p => p.status === 'pending' || p.status === 'partial');
  const overdueCount = allPayments.filter(p => p.status === 'overdue').length;
  const completedCount = paidPayments.length;

  return {
    totalPayable,
    paidAmount: totalPaid,
    remainingBalance,
    nextPaymentDate: nextPayment ? new Date(nextPayment.paymentDate) : null,
    nextPaymentAmount: nextPayment ? nextPayment.totalPayment : 0,
    overdueCount,
    completedCount,
  };
}
