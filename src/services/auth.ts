import { ApiService } from './api';
import { ClientEncryption } from '../utils/encryption';

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface RegisterData {
  email: string;
  password: string;
  display_name?: string;
}

export interface User {
  id: string;
  email: string;
  displayName: string;
  isGuest: boolean;
  isPremium: boolean;
  createdAt: string;
}

export interface AuthResponse {
  user: User;
  accessToken: string;
  refreshToken: string;
}

export class AuthService {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async register(data: RegisterData): Promise<AuthResponse> {
    const response = await ApiService.post<AuthResponse>('/auth/register', data);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
    await ApiService.setAccessToken(response.accessToken);
    await ApiService.setRefreshToken(response.refreshToken);
    
    return response;
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  static async login(credentials: LoginCredentials): Promise<AuthResponse> {
    const response = await ApiService.post<AuthResponse>('/auth/login', credentials);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
    await ApiService.setAccessToken(response.accessToken);
    await ApiService.setRefreshToken(response.refreshToken);
    
    return response;
  }

  // –í—Ö–æ–¥ –∫–∞–∫ –≥–æ—Å—Ç—å
  static async loginAsGuest(): Promise<AuthResponse> {
    const response = await ApiService.post<AuthResponse>('/auth/guest');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
    await ApiService.setAccessToken(response.accessToken);
    await ApiService.setRefreshToken(response.refreshToken);
    
    return response;
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  static async loginWithGoogle(googleData: { idToken: string; email: string; name: string; googleId: string }): Promise<AuthResponse> {
    console.log('üîë [AuthService] –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –¥–ª—è:', googleData.email);
    
    const response = await ApiService.post<AuthResponse>('/auth/google', googleData);
    
    console.log('üîë [AuthService] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('  - Access Token:', response.accessToken ? '–ï—Å—Ç—å (' + response.accessToken.substring(0, 20) + '...)' : '–ù–µ—Ç');
    console.log('  - Refresh Token:', response.refreshToken ? '–ï—Å—Ç—å (' + response.refreshToken.substring(0, 20) + '...)' : '–ù–µ—Ç');
    console.log('  - User ID:', response.user.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ refresh token –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å
    if (!response.refreshToken) {
      console.error('‚ùå [AuthService] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞!');
      console.error('‚ùå [AuthService] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(response, null, 2));
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
    console.log('üíæ [AuthService] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã...');
    await ApiService.setAccessToken(response.accessToken);
    await ApiService.setRefreshToken(response.refreshToken);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    const savedAccessToken = await ApiService.getAccessToken();
    const savedRefreshToken = await ApiService.getRefreshToken();
    
    console.log('‚úÖ [AuthService] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:');
    console.log('  - Access Token —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', savedAccessToken ? '–î–∞' : '–ù–µ—Ç');
    console.log('  - Refresh Token —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', savedRefreshToken ? '–î–∞' : '–ù–µ—Ç');
    
    if (!savedRefreshToken) {
      console.error('‚ùå [AuthService] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Refresh token –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è!');
    }
    
    console.log('‚úÖ [AuthService] –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    
    return response;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞
  static async refreshToken(token: string): Promise<{accessToken: string, refreshToken: string} | null> {
    try {
      console.log('üîÑ [AuthService] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
      const response = await ApiService.post<{ accessToken: string, refreshToken: string }>('/auth/refresh', {
        refreshToken: token
      });

      console.log('‚úÖ [AuthService] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      await ApiService.saveTokens(response.accessToken, response.refreshToken);
      return response;
    } catch (error) {
      console.log('‚ö†Ô∏è [AuthService] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –Ω–æ –ù–ï –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã');
      console.log('‚ö†Ô∏è [AuthService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ');
      // –ù–ï –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
      return null;
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  static async logout(): Promise<void> {
    try {
      const refreshToken = await ApiService.getRefreshToken();
      if (refreshToken) {
        await ApiService.post('/auth/logout', { refreshToken });
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      console.error('Logout error:', error);
    } finally {
      await ApiService.clearTokens();
      await ClientEncryption.clearEncryptionData(); // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getCurrentUser(): Promise<User | null> {
    try {
      const token = await ApiService.getAccessToken();
      if (!token) return null;

      const response = await ApiService.get<{ user: User }>('/auth/me');
      return response.user;
    } catch (error) {
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  static async isAuthenticated(): Promise<boolean> {
    const token = await ApiService.getAccessToken();
    return !!token;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
  static checkPasswordStrength(password: string): {
    strength: 'weak' | 'medium' | 'strong';
    suggestions: string[];
  } {
    const suggestions: string[] = [];
    let strength: 'weak' | 'medium' | 'strong' = 'weak';
    
    if (password.length < 8) {
      suggestions.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
    }
    
    if (!/[A-Z]/.test(password)) {
      suggestions.push('–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã');
    }
    
    if (!/[a-z]/.test(password)) {
      suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã');
    }
    
    if (!/[0-9]/.test(password)) {
      suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã');
    }
    
    if (!/[!@#$%^&*]/.test(password)) {
      suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã');
    }
    
    const score = [
      password.length >= 8,
      /[A-Z]/.test(password),
      /[a-z]/.test(password),
      /[0-9]/.test(password),
      /[!@#$%^&*]/.test(password),
      password.length >= 12
    ].filter(Boolean).length;
    
    if (score >= 5) strength = 'strong';
    else if (score >= 3) strength = 'medium';
    
    return { strength, suggestions };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
  static async generateSecurePassword(): Promise<string> {
    return ClientEncryption.generateSecurePassword();
  }
} 