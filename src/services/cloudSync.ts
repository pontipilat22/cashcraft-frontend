import AsyncStorage from '@react-native-async-storage/async-storage';
import { Account, Transaction, Category, Debt } from '../types';
import { LocalDatabaseService } from './localDatabase';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
interface CloudData {
  accounts: Account[];
  transactions: Transaction[];
  categories: Category[];
  debts: Debt[];
  exchangeRates: any[]; // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
  lastSyncAt: string;
  userId: string;
}

export class CloudSyncService {
  // URL –≤–∞—à–µ–≥–æ backend API (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
  private static API_URL = 'https://cashcraft-backend-production.up.railway.app';
  
  // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º AsyncStorage –∫–∞–∫ "–æ–±–ª–∞–∫–æ"
  private static DEMO_MODE = false;

  static async authenticate(email: string, password: string): Promise<string | null> {
    if (this.DEMO_MODE) {
      // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º email –∫–∞–∫ —Ç–æ–∫–µ–Ω
      return email;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    try {
      const response = await fetch(`${this.API_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      
      if (response.ok) {
        const data = await response.json();
        return data.token;
      }
      return null;
    } catch (error) {
      console.error('Authentication error:', error);
      return null;
    }
  }

  static async syncData(userId: string, token: string): Promise<boolean> {
    try {
      console.log('[CloudSync] –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞
      if (!LocalDatabaseService.isDatabaseReady()) {
        console.log('[CloudSync] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        return false;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const localData = await LocalDatabaseService.getUnsyncedData();
      
      console.log('[CloudSync] –ü–æ–ª—É—á–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        accounts: localData.accounts.length,
        transactions: localData.transactions.length,
        categories: localData.categories.length,
        debts: localData.debts.length
      });
      
      if (this.DEMO_MODE) {
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage
        const cloudKey = `cloudData_${userId}`;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const existingCloudData = await AsyncStorage.getItem(cloudKey);
        let cloudData: CloudData;
        
        if (existingCloudData) {
          cloudData = JSON.parse(existingCloudData);
          
          // –ú–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ
          cloudData = this.mergeData(cloudData, {
            accounts: localData.accounts,
            transactions: localData.transactions,
            categories: localData.categories,
            debts: localData.debts,
            exchangeRates: localData.exchangeRates,
            lastSyncAt: new Date().toISOString(),
            userId,
          });
        } else {
          // –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          cloudData = {
            accounts: localData.accounts,
            transactions: localData.transactions,
            categories: localData.categories,
            debts: localData.debts,
            exchangeRates: localData.exchangeRates,
            lastSyncAt: new Date().toISOString(),
            userId,
          };
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ "–æ–±–ª–∞–∫–æ"
        await AsyncStorage.setItem(cloudKey, JSON.stringify(cloudData));
        
        // –ü–æ–º–µ—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        await this.markDataAsSynced(localData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await LocalDatabaseService.updateSyncTime(new Date().toISOString());
        
        return true;
      } else {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('[CloudSync] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', `${this.API_URL}/api/v1/sync`);
        
        const response = await fetch(`${this.API_URL}/api/v1/sync`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            userId,
            data: localData,
            lastSyncAt: await LocalDatabaseService.getLastSyncTime(),
          }),
        });
        
        console.log('[CloudSync] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        if (response.ok) {
          const result = await response.json();
          console.log('[CloudSync] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', result);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
          await this.applyCloudChanges(result.changes);
          
          // –ü–æ–º–µ—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
          await this.markDataAsSynced(localData);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          await LocalDatabaseService.updateSyncTime(result.syncTime, result.syncToken);
          
          return true;
        } else {
          const errorText = await response.text();
          console.error('[CloudSync] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', response.status, errorText);
          
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ DataContext
          if (response.status === 401) {
            throw new Error('401 Token expired');
          }
          
          return false;
        }
      }
    } catch (error) {
      console.error('Sync error:', error);
      if (error instanceof TypeError && error.message.includes('Network request failed')) {
        console.log('[CloudSync] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      return false;
    }
  }

  static async downloadData(userId: string, token: string): Promise<boolean> {
    try {
      console.log('‚òÅÔ∏è [CloudSync] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      
      if (this.DEMO_MODE) {
        console.log('üé≠ [CloudSync] –î–µ–º–æ —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ AsyncStorage');
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ AsyncStorage
        const cloudKey = `cloudData_${userId}`;
        const cloudDataString = await AsyncStorage.getItem(cloudKey);
        
        if (cloudDataString) {
          const cloudData: CloudData = JSON.parse(cloudDataString);
          console.log('üìä [CloudSync] –î–∞–Ω–Ω—ã–µ –∏–∑ AsyncStorage:', {
            accounts: cloudData.accounts.length,
            transactions: cloudData.transactions.length,
            categories: cloudData.categories.length,
            debts: cloudData.debts.length
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
          if (LocalDatabaseService.isDatabaseReady()) {
            console.log('üóÑÔ∏è [CloudSync] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞, –æ—á–∏—â–∞–µ–º –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º...');
            // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
            await LocalDatabaseService.resetAllData();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
            await this.importCloudData(cloudData);
            
            console.log('‚úÖ [CloudSync] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ AsyncStorage');
            return true;
          } else {
            console.log('‚ö†Ô∏è [CloudSync] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback —Ä–µ–∂–∏–º–∞');
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ AsyncStorage –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
            await AsyncStorage.setItem('fallback_cloud_data', cloudDataString);
            return true;
          }
        }
        console.log('‚ö†Ô∏è [CloudSync] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ AsyncStorage');
        return false;
      } else {
        console.log('üåê [CloudSync] –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞');
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        const response = await fetch(`${this.API_URL}/api/v1/sync/download`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        });
        
        console.log('üì° [CloudSync] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        if (response.ok) {
          const cloudData = await response.json();
          console.log('üìä [CloudSync] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(cloudData, null, 2));
          console.log('üìä [CloudSync] –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:', {
            accounts: cloudData.accounts?.length || 0,
            transactions: cloudData.transactions?.length || 0,
            categories: cloudData.categories?.length || 0,
            debts: cloudData.debts?.length || 0
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
          if (!cloudData.accounts || !Array.isArray(cloudData.accounts)) {
            console.log('‚ö†Ô∏è [CloudSync] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: accounts –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
            console.log('‚ö†Ô∏è [CloudSync] cloudData.accounts:', cloudData.accounts);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          const hasValidStructure = Array.isArray(cloudData.accounts) && 
                                   Array.isArray(cloudData.transactions) &&
                                   Array.isArray(cloudData.categories) &&
                                   Array.isArray(cloudData.debts);
          
          if (!hasValidStructure) {
            console.log('‚ùå [CloudSync] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            return false;
          }
          
          // –î–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const hasData = (cloudData.accounts?.length || 0) > 0 || 
                         (cloudData.transactions?.length || 0) > 0 ||
                         (cloudData.categories?.length || 0) > 0 ||
                         (cloudData.debts?.length || 0) > 0;
          
          if (!hasData) {
            console.log('‚ÑπÔ∏è [CloudSync] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)');
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
          const isDatabaseReady = LocalDatabaseService.isDatabaseReady();
          console.log('üóÑÔ∏è [CloudSync] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', isDatabaseReady);
          
          if (isDatabaseReady) {
            console.log('üóÑÔ∏è [CloudSync] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞, –æ—á–∏—â–∞–µ–º –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º...');
            // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
            await LocalDatabaseService.resetAllData();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
            await this.importCloudData(cloudData);
            
            console.log('‚úÖ [CloudSync] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
            return true;
          } else {
            console.log('‚ö†Ô∏è [CloudSync] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback —Ä–µ–∂–∏–º–∞');
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ AsyncStorage –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
            await AsyncStorage.setItem('fallback_cloud_data', JSON.stringify(cloudData));
            console.log('üíæ [CloudSync] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
            return true;
          }
        } else {
          const errorText = await response.text();
          console.error('‚ùå [CloudSync] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', response.status, errorText);
        }
        return false;
      }
    } catch (error) {
      console.error('‚ùå [CloudSync] Download error:', error);
      if (error instanceof TypeError && error.message.includes('Network request failed')) {
        console.log('üåê [CloudSync] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      return false;
    }
  }

  private static mergeData(existing: CloudData, newData: CloudData): CloudData {
    // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
    const merged: CloudData = {
      accounts: [],
      transactions: [],
      categories: [],
      debts: [],
      exchangeRates: [],
      lastSyncAt: newData.lastSyncAt,
      userId: newData.userId,
    };

    // –ú–µ—Ä–∂–∏–º —Å—á–µ—Ç–∞
    const accountsMap = new Map<string, Account>();
    [...existing.accounts, ...newData.accounts].forEach(account => {
      const existing = accountsMap.get(account.id);
      if (!existing || (account.updatedAt && existing.updatedAt && new Date(account.updatedAt) > new Date(existing.updatedAt))) {
        accountsMap.set(account.id, account);
      } else if (!existing) {
        accountsMap.set(account.id, account);
      }
    });
    merged.accounts = Array.from(accountsMap.values());

    // –ú–µ—Ä–∂–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactionsMap = new Map<string, Transaction>();
    [...existing.transactions, ...newData.transactions].forEach(transaction => {
      const existing = transactionsMap.get(transaction.id);
      const transactionDate = transaction.updatedAt || transaction.date;
      const existingDate = existing?.updatedAt || existing?.date;
      
      if (!existing || (transactionDate && existingDate && new Date(transactionDate) > new Date(existingDate))) {
        transactionsMap.set(transaction.id, transaction);
      } else if (!existing) {
        transactionsMap.set(transaction.id, transaction);
      }
    });
    merged.transactions = Array.from(transactionsMap.values());

    // –ú–µ—Ä–∂–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesMap = new Map<string, Category>();
    [...existing.categories, ...newData.categories].forEach(category => {
      categoriesMap.set(category.id, category);
    });
    merged.categories = Array.from(categoriesMap.values());

    // –ú–µ—Ä–∂–∏–º –¥–æ–ª–≥–∏
    const debtsMap = new Map<string, Debt>();
    [...existing.debts, ...newData.debts].forEach(debt => {
      const existing = debtsMap.get(debt.id);
      if (!existing || (debt.updatedAt && existing.updatedAt && new Date(debt.updatedAt) > new Date(existing.updatedAt))) {
        debtsMap.set(debt.id, debt);
      } else if (!existing) {
        debtsMap.set(debt.id, debt);
      }
    });
    merged.debts = Array.from(debtsMap.values());

    // –ú–µ—Ä–∂–∏–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    merged.exchangeRates = [...existing.exchangeRates, ...newData.exchangeRates];

    return merged;
  }

  private static async markDataAsSynced(data: {
    accounts: Account[];
    transactions: Transaction[];
    categories: Category[];
    debts: Debt[];
    exchangeRates: any[];
  }): Promise<void> {
    await LocalDatabaseService.markAsSynced('accounts', data.accounts.map(a => a.id));
    await LocalDatabaseService.markAsSynced('transactions', data.transactions.map(t => t.id));
    await LocalDatabaseService.markAsSynced('categories', data.categories.map(c => c.id));
    await LocalDatabaseService.markAsSynced('debts', data.debts.map(d => d.id));
    // –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
  }

  private static async applyCloudChanges(changes: any): Promise<void> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã–µ/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏, —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏ —Ç.–¥.
  }

  private static async importCloudData(cloudData: any): Promise<void> {
    console.log('üì• [CloudSync] –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    const safeData = {
      accounts: Array.isArray(cloudData.accounts) ? cloudData.accounts : [],
      transactions: Array.isArray(cloudData.transactions) ? cloudData.transactions : [],
      categories: Array.isArray(cloudData.categories) ? cloudData.categories : [],
      debts: Array.isArray(cloudData.debts) ? cloudData.debts : []
    };
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üìÇ [CloudSync] –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', safeData.categories.length);
    for (const category of safeData.categories) {
      try {
        await LocalDatabaseService.createCategory(category);
      } catch (error) {
        console.error('‚ùå [CloudSync] Error importing category:', error);
      }
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç–∞
    console.log('üè¶ [CloudSync] –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç–∞:', safeData.accounts.length);
    for (const account of safeData.accounts) {
      try {
        const { id, createdAt, updatedAt, ...accountData } = account;
        await LocalDatabaseService.createAccount(accountData);
      } catch (error) {
        console.error('‚ùå [CloudSync] Error importing account:', error);
      }
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('üí≥ [CloudSync] –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', safeData.transactions.length);
    for (const transaction of safeData.transactions) {
      try {
        const { id, ...transactionData } = transaction;
        await LocalDatabaseService.createTransaction(transactionData);
      } catch (error) {
        console.error('‚ùå [CloudSync] Error importing transaction:', error);
      }
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥–∏
    console.log('üí∏ [CloudSync] –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥–∏:', safeData.debts.length);
    for (const debt of safeData.debts) {
      try {
        const { id, createdAt, updatedAt, ...debtData } = debt;
        await LocalDatabaseService.createDebt(debtData);
      } catch (error) {
        console.error('‚ùå [CloudSync] Error importing debt:', error);
      }
    }

    console.log('‚úÖ [CloudSync] –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  static startAutoSync(userId: string, token: string, intervalMinutes: number = 5): void {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
    setInterval(async () => {
      const hasInternet = await this.checkInternetConnection();
      if (hasInternet) {
        await this.syncData(userId, token);
      }
    }, intervalMinutes * 60 * 1000);
  }

  static async checkInternetConnection(): Promise<boolean> {
    try {
      const response = await fetch('https://www.google.com', {
        method: 'HEAD',
      });
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async deleteCloudData(userId: string, token: string): Promise<boolean> {
    try {
      if (this.DEMO_MODE) {
        const cloudKey = `cloudData_${userId}`;
        await AsyncStorage.removeItem(cloudKey);
        return true;
      } else {
        const response = await fetch(`${this.API_URL}/user/delete`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        });
        return response.ok;
      }
    } catch (error) {
      console.error('Delete cloud data error:', error);
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  static async getFallbackData(): Promise<CloudData | null> {
    try {
      const fallbackDataString = await AsyncStorage.getItem('fallback_cloud_data');
      if (fallbackDataString) {
        const fallbackData = JSON.parse(fallbackDataString);
        
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        const safeData: CloudData = {
          accounts: Array.isArray(fallbackData.accounts) ? fallbackData.accounts : [],
          transactions: Array.isArray(fallbackData.transactions) ? fallbackData.transactions : [],
          categories: Array.isArray(fallbackData.categories) ? fallbackData.categories : [],
          debts: Array.isArray(fallbackData.debts) ? fallbackData.debts : [],
          exchangeRates: Array.isArray(fallbackData.exchangeRates) ? fallbackData.exchangeRates : [],
          lastSyncAt: fallbackData.lastSyncAt || new Date().toISOString(),
          userId: fallbackData.userId || ''
        };
        
        console.log('üìä [CloudSync] –î–∞–Ω–Ω—ã–µ –∏–∑ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', {
          accounts: safeData.accounts.length,
          transactions: safeData.transactions.length,
          categories: safeData.categories.length,
          debts: safeData.debts.length
        });
        return safeData;
      }
      return null;
    } catch (error) {
      console.error('‚ùå [CloudSync] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ fallback –¥–∞–Ω–Ω—ã—Ö
  static async clearFallbackData(): Promise<void> {
    try {
      await AsyncStorage.removeItem('fallback_cloud_data');
      console.log('üóëÔ∏è [CloudSync] Fallback –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå [CloudSync] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ fallback –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }
} 