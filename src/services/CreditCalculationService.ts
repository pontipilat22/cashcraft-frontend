/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–µ –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
 */

export interface CreditParams {
  principal: number; // –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
  annualRate: number; // –ì–æ–¥–æ–≤–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)
  termMonths: number; // –°—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö
  startDate: Date; // –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
  firstPaymentDate?: Date; // –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  paymentType: 'annuity' | 'differentiated'; // –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞
}

export interface PaymentScheduleItem {
  paymentNumber: number;
  paymentDate: Date;
  totalPayment: number; // –û–±—â–∏–π –ø–ª–∞—Ç—ë–∂
  principalPayment: number; // –ü–ª–∞—Ç—ë–∂ –ø–æ —Ç–µ–ª—É –∫—Ä–µ–¥–∏—Ç–∞
  interestPayment: number; // –ü–ª–∞—Ç—ë–∂ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º
  remainingBalance: number; // –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞
}

/**
 * –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
 */
function round(num: number): number {
  return Math.round(num * 100) / 100;
}

/**
 * –†–∞—Å—á—ë—Ç –º–µ—Å—è—á–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
 */
function getMonthlyRate(annualRate: number): number {
  return annualRate / 100 / 12;
}

/**
 * –†–∞—Å—á—ë—Ç –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞
 */
function getPaymentDate(startDate: Date, monthsFromStart: number, firstPaymentDate?: Date): Date {
  if (monthsFromStart === 1 && firstPaymentDate) {
    return new Date(firstPaymentDate);
  }

  const baseDate = firstPaymentDate || startDate;
  const date = new Date(baseDate);

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã
  const monthsToAdd = firstPaymentDate ? monthsFromStart - 1 : monthsFromStart;
  date.setMonth(date.getMonth() + monthsToAdd);

  return date;
}

/**
 * –†–∞—Å—á—ë—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 * –§–æ—Ä–º—É–ª–∞: A = K * S, –≥–¥–µ
 * K = (i * (1 + i)^n) / ((1 + i)^n - 1)
 * i - –º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞, n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤, S - —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
 */
function calculateAnnuityPayment(principal: number, monthlyRate: number, termMonths: number): number {
  if (monthlyRate === 0) {
    return principal / termMonths;
  }

  const K = (monthlyRate * Math.pow(1 + monthlyRate, termMonths)) /
            (Math.pow(1 + monthlyRate, termMonths) - 1);

  return round(principal * K);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
 */
function generateAnnuitySchedule(params: CreditParams): PaymentScheduleItem[] {
  const { principal, annualRate, termMonths, startDate, firstPaymentDate } = params;
  const monthlyRate = getMonthlyRate(annualRate);
  const monthlyPayment = calculateAnnuityPayment(principal, monthlyRate, termMonths);

  const schedule: PaymentScheduleItem[] = [];
  let remainingBalance = principal;

  for (let month = 1; month <= termMonths; month++) {
    const interestPayment = round(remainingBalance * monthlyRate);
    let principalPayment = round(monthlyPayment - interestPayment);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    if (month === termMonths) {
      principalPayment = remainingBalance;
      const totalPayment = principalPayment + interestPayment;
      remainingBalance = 0;

      schedule.push({
        paymentNumber: month,
        paymentDate: getPaymentDate(startDate, month, firstPaymentDate),
        totalPayment: round(totalPayment),
        principalPayment: round(principalPayment),
        interestPayment: round(interestPayment),
        remainingBalance: 0,
      });
    } else {
      remainingBalance = round(remainingBalance - principalPayment);

      schedule.push({
        paymentNumber: month,
        paymentDate: getPaymentDate(startDate, month, firstPaymentDate),
        totalPayment: monthlyPayment,
        principalPayment: principalPayment,
        interestPayment: interestPayment,
        remainingBalance: remainingBalance,
      });
    }
  }

  return schedule;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
 */
function generateDifferentiatedSchedule(params: CreditParams): PaymentScheduleItem[] {
  const { principal, annualRate, termMonths, startDate, firstPaymentDate } = params;
  const monthlyRate = getMonthlyRate(annualRate);
  const principalPayment = round(principal / termMonths);

  const schedule: PaymentScheduleItem[] = [];
  let remainingBalance = principal;

  for (let month = 1; month <= termMonths; month++) {
    const interestPayment = round(remainingBalance * monthlyRate);
    let currentPrincipalPayment = principalPayment;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    if (month === termMonths) {
      currentPrincipalPayment = remainingBalance;
    }

    const totalPayment = round(currentPrincipalPayment + interestPayment);
    remainingBalance = round(remainingBalance - currentPrincipalPayment);

    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ —É—Ö–æ–¥–∏—Ç –≤ –º–∏–Ω—É—Å
    if (remainingBalance < 0.01) {
      remainingBalance = 0;
    }

    schedule.push({
      paymentNumber: month,
      paymentDate: getPaymentDate(startDate, month, firstPaymentDate),
      totalPayment: totalPayment,
      principalPayment: round(currentPrincipalPayment),
      interestPayment: round(interestPayment),
      remainingBalance: remainingBalance,
    });
  }

  return schedule;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export function generatePaymentSchedule(params: CreditParams): PaymentScheduleItem[] {
  if (params.paymentType === 'annuity') {
    return generateAnnuitySchedule(params);
  } else {
    return generateDifferentiatedSchedule(params);
  }
}

/**
 * –†–∞—Å—á—ë—Ç –æ–±—â–µ–π —Å—É–º–º—ã –≤—ã–ø–ª–∞—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç—É
 */
export function calculateTotalPayment(schedule: PaymentScheduleItem[]): number {
  return round(schedule.reduce((sum, item) => sum + item.totalPayment, 0));
}

/**
 * –†–∞—Å—á—ë—Ç –æ–±—â–µ–π —Å—É–º–º—ã –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
 */
export function calculateTotalInterest(schedule: PaymentScheduleItem[]): number {
  return round(schedule.reduce((sum, item) => sum + item.interestPayment, 0));
}

/**
 * –ü–µ—Ä–µ—Å—á—ë—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
 * @param originalSchedule - –∏—Å—Ö–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
 * @param earlyPaymentAmount - —Å—É–º–º–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
 * @param earlyPaymentMonth - –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
 * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞
 * @returns –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export function recalculateScheduleAfterEarlyPayment(
  originalSchedule: PaymentScheduleItem[],
  earlyPaymentAmount: number,
  earlyPaymentMonth: number,
  params: CreditParams
): PaymentScheduleItem[] {
  // –ù–∞—Ö–æ–¥–∏–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
  const paymentBeforeEarly = originalSchedule.find(p => p.paymentNumber === earlyPaymentMonth - 1);
  if (!paymentBeforeEarly) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è');
  }

  const newPrincipal = round(paymentBeforeEarly.remainingBalance - earlyPaymentAmount);

  // –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ 1 —Ä—É–±–ª—è (–∫–æ–ø–µ–π–∫–∏), —Å—á–∏—Ç–∞–µ–º –∫—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω–Ω—ã–º
  if (newPrincipal < 1) {
    console.log('  - –û—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ 1, –∫—Ä–µ–¥–∏—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–≥–∞—à–µ–Ω–Ω—ã–º');
    return [];
  }

  console.log('üìä [CreditCalculation] –ü–µ—Ä–µ—Å—á–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:');
  console.log('  - –ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞:', params.termMonths, '–º–µ—Å.');
  console.log('  - –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:', earlyPaymentMonth);
  console.log('  - –û–ø–ª–∞—á–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π:', earlyPaymentMonth - 1);
  console.log('  - –û—Å—Ç–∞—Ç–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –¥–æ –¥–æ—Å—Ä–æ—á–∫–∏:', paymentBeforeEarly.remainingBalance);
  console.log('  - –°—É–º–º–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:', earlyPaymentAmount);
  console.log('  - –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞:', newPrincipal);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–µ—Å—è—Ü–µ–≤
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ = earlyPaymentMonth - 1
  const remainingMonths = params.termMonths - (earlyPaymentMonth - 1);
  console.log('  - –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–µ—Å—è—Ü–µ–≤:', remainingMonths);

  const nextPaymentItem = originalSchedule.find(p => p.paymentNumber === earlyPaymentMonth);
  if (!nextPaymentItem) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã');
  }

  const newParams: CreditParams = {
    ...params,
    principal: newPrincipal,
    termMonths: remainingMonths,
    startDate: nextPaymentItem.paymentDate,
  };

  const newSchedule = generatePaymentSchedule(newParams);

  console.log('  - –ù–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω:', newSchedule.length, '–ø–ª–∞—Ç–µ–∂–µ–π');

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
  const correctedSchedule = newSchedule.map((item, index) => ({
    ...item,
    paymentNumber: item.paymentNumber + earlyPaymentMonth - 1,
  }));

  console.log('  - –ù–æ–º–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã: —Å', correctedSchedule[0]?.paymentNumber, '–ø–æ', correctedSchedule[correctedSchedule.length - 1]?.paymentNumber);
  console.log('‚úÖ [CreditCalculation] –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');

  return correctedSchedule;
}
