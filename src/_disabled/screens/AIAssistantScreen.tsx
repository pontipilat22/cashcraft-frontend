import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  FlatList,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator,
  Alert
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import Ionicons from '@expo/vector-icons/Ionicons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useTheme } from '../context/ThemeContext';
import { useLocalization } from '../context/LocalizationContext';
import { useData } from '../context/DataContext';
import { useNavigation } from '@react-navigation/native';
import { AIService, ChatMessage } from '../services/aiService';

const CHAT_HISTORY_KEY = '@ai_chat_history';

export const AIAssistantScreen: React.FC = () => {
  const { colors } = useTheme();
  const { t } = useLocalization();
  const { createAccount, createTransaction, deleteAccount, accounts, categories } = useData();
  const navigation = useNavigation();

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º tab bar –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–≤–∞—à –∫–æ–¥, –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
  useEffect(() => {
    const parent = navigation.getParent();
    if (parent) {
      parent.setOptions({ tabBarStyle: { display: 'none' } });
    }
    return () => {
      if (parent) {
        parent.setOptions({ tabBarStyle: { display: 'flex' } });
      }
    };
  }, [navigation]);

  const flatListRef = useRef<FlatList>(null);

  const [messages, setMessages] = useState<ChatMessage[]>([
    AIService.getWelcomeMessage()
  ]);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadChatHistory();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (messages.length > 1) { // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      saveChatHistory();
    }
  }, [messages]);

  const loadChatHistory = async () => {
    try {
      const savedHistory = await AsyncStorage.getItem(CHAT_HISTORY_KEY);
      if (savedHistory) {
        const parsed = JSON.parse(savedHistory);
        setMessages(parsed);
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', parsed.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
    }
  };

  const saveChatHistory = async () => {
    try {
      await AsyncStorage.setItem(CHAT_HISTORY_KEY, JSON.stringify(messages));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
    }
  };

  const clearChatHistory = async () => {
    Alert.alert(
      t('ai.clearHistory') || '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é',
      t('ai.clearHistoryConfirm') || '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?',
      [
        { text: t('common.cancel') || '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: t('common.delete') || '–£–¥–∞–ª–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              await AsyncStorage.removeItem(CHAT_HISTORY_KEY);
              setMessages([AIService.getWelcomeMessage()]);
              console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞');
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            }
          },
        },
      ]
    );
  };

  // 1. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–ù–°–¢–†–£–ú–ï–ù–¢–´, –ö–û–¢–û–†–´–ï AI –ú–û–ñ–ï–¢ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨
  const availableTools = [
    {
      name: 'createAccount',
      description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—á–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ª–∏—á–Ω—ã–µ, –∫–∞—Ä—Ç—É, –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏).',
      parameters: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
            description: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ö–∞—Ä—Ç–∞ Kaspi" –∏–ª–∏ "–ö–æ–ø–∏–ª–∫–∞".',
          },
          currency: {
            type: 'string',
            description: '–¢—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä KZT, USD, RUB.',
          },
          accountType: {
            type: 'string',
            description: '–¢–∏–ø —Å—á–µ—Ç–∞: "cash" –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö, "card" –¥–ª—è –∫–∞—Ä—Ç—ã, "bank" –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞, "savings" –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π, "investment" –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.',
            enum: ['cash', 'card', 'bank', 'savings', 'investment'],
          },
        },
        required: ['name', 'currency', 'accountType'],
      },
    },
    {
      name: 'addTransaction',
      description: '–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –¥–æ—Ö–æ–¥–∞.',
      parameters: {
        type: 'object',
        properties: {
          amount: {
            type: 'number',
            description: '–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.',
          },
          category: {
            type: 'string',
            description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ü—Ä–æ–¥—É–∫—Ç—ã", "–¢–∞–∫—Å–∏", "–ó–∞—Ä–ø–ª–∞—Ç–∞".',
          },
          type: {
            type: 'string',
            description: '–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: "expense" –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ "income" –¥–ª—è –¥–æ—Ö–æ–¥–∞.',
          },
          date: {
            type: 'string',
            description: '–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD". –ù–∞–ø—Ä–∏–º–µ—Ä "2025-10-16". –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞.',
          },
        },
        required: ['amount', 'category', 'type'],
      },
    },
    {
      name: 'deleteAccount',
      description: '–£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é.',
      parameters: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
            description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "Kaspi" –∏–ª–∏ "–ù–∞–ª–∏—á–Ω—ã–µ".',
          },
        },
        required: ['name'],
      },
    },
    {
      name: 'deleteTransaction',
      description: '–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Å—É–º–º–µ.',
      parameters: {
        type: 'object',
        properties: {
          category: {
            type: 'string',
            description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.',
          },
          amount: {
            type: 'number',
            description: '–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).',
          },
        },
        required: ['category'],
      },
    },
  ];

  useEffect(() => {
    if (messages.length > 0) {
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }
  }, [messages]);

  // 2. –û–ë–ù–û–í–õ–Ø–ï–ú –õ–û–ì–ò–ö–£ –û–¢–ü–†–ê–í–ö–ò –ò –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–í–ï–¢–ê
  const handleSend = async () => {
    if (!inputText.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      role: 'user',
      content: inputText.trim(),
      timestamp: Date.now()
    };

    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInputText('');
    setIsLoading(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –≤–º–µ—Å—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      const aiResponse = await AIService.sendMessage(newMessages, availableTools);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
      if (aiResponse.type === 'tool_calls') {
        // AI —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        console.log(`üìã AI –∑–∞–ø—Ä–æ—Å–∏–ª ${aiResponse.calls.length} –¥–µ–π—Å—Ç–≤–∏–π`);

        const results: string[] = [];

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for (const call of aiResponse.calls) {
          const result = await handleToolCall(call.tool_name, call.arguments);
          if (result) results.push(result);
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
          await new Promise(resolve => setTimeout(resolve, 300));
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if (results.length > 0) {
          const summaryMessage: ChatMessage = {
            role: 'assistant',
            content: results.join('\n'),
            timestamp: Date.now(),
          };
          setMessages(prev => [...prev, summaryMessage]);
        }
      } else {
        // AI –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª —Ç–µ–∫—Å—Ç–æ–º
        const assistantMessage: ChatMessage = {
          role: 'assistant',
          content: aiResponse.content, // –û—Ç–≤–µ—Ç —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–ª–µ content
          timestamp: Date.now()
        };
        setMessages(prev => [...prev, assistantMessage]);
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å AI:', error);
      Alert.alert(
        t('ai.error') || '–û—à–∏–±–∫–∞',
        error?.message || t('ai.errorMessage') || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI'
      );
    } finally {
      setIsLoading(false);
    }
  };

  // 3. –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î –û–¢ AI (TOOL CALLS)
  const handleToolCall = async (toolName: string, args: any): Promise<string> => {
    const accountTypeLabels: Record<string, string> = {
      cash: '–Ω–∞–ª–∏—á–Ω—ã–µ',
      card: '–∫–∞—Ä—Ç—É',
      bank: '–±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç',
      savings: '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è',
      investment: '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
    };

    try {
      switch (toolName) {
        case 'createAccount':
          const accountType = args.accountType || 'cash';
          await createAccount({
            name: args.name,
            balance: 0,
            currency: args.currency,
            type: accountType,
            isIncludedInTotal: true,
          });
          const createdTypeLabel = accountTypeLabels[accountType] || '—Å—á–µ—Ç';
          return `‚úÖ ${createdTypeLabel.charAt(0).toUpperCase() + createdTypeLabel.slice(1)} "${args.name}" —Å–æ–∑–¥–∞–Ω`;

        case 'addTransaction':
          if (!accounts || accounts.length === 0) {
            return '‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—á–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π';
          }

          const defaultAccount = accounts.find(acc => acc.isIncludedInTotal) || accounts[0];
          const categoryName = args.category;
          let category = categories?.find(cat =>
            cat.name.toLowerCase() === categoryName.toLowerCase()
          );

          if (!category) {
            category = categories?.find(cat =>
              cat.name === '–†–∞–∑–Ω–æ–µ' || cat.name === 'Other' || cat.name.toLowerCase() === 'other'
            );
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
          let transactionDate: string;
          if (args.date) {
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO
            const parsedDate = new Date(args.date);
            transactionDate = parsedDate.toISOString();
          } else {
            transactionDate = new Date().toISOString();
          }

          await createTransaction({
            amount: args.amount,
            type: args.type || 'expense',
            categoryId: category?.id || '',
            accountId: defaultAccount.id,
            date: transactionDate,
            description: `–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ AI –ø–æ–º–æ—â–Ω–∏–∫–∞`,
          });

          const dateStr = args.date ? ` –∑–∞ ${args.date}` : '';
          return `‚úÖ ${args.type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'} ${args.amount} (${args.category})${dateStr} –¥–æ–±–∞–≤–ª–µ–Ω`;

        case 'deleteAccount':
          const accountToDelete = accounts?.find(acc =>
            acc.name.toLowerCase() === args.name.toLowerCase()
          );
          if (!accountToDelete) {
            return `‚ùå –°—á–µ—Ç "${args.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`;
          }
          await deleteAccount(accountToDelete.id);
          return `‚úÖ –°—á–µ—Ç "${args.name}" —É–¥–∞–ª–µ–Ω`;

        case 'deleteTransaction':
          // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const targetCategory = categories?.find(cat =>
            cat.name.toLowerCase() === args.category.toLowerCase()
          );
          if (!targetCategory) {
            return `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${args.category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
          }

          // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ transactions –∏–∑ DataContext
          // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
          // TODO: –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ transactions –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          return `‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ AI –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`;

        default:
          return `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${toolName}`;
      }
    } catch (error: any) {
      console.error('‚ùå [AIAssistantScreen] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
      return `‚ùå –û—à–∏–±–∫–∞: ${error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É'}`;
    }
  };


  const renderMessage = ({ item }: { item: ChatMessage }) => {
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const isUser = item.role === 'user';

    return (
      <View
        style={[
          styles.messageContainer,
          isUser ? styles.userMessageContainer : styles.aiMessageContainer
        ]}
      >
        {!isUser && (
          <View style={[styles.avatarContainer, { backgroundColor: colors.primary }]}>
            <Ionicons name="sparkles" size={16} color="#fff" />
          </View>
        )}
        <View
          style={[
            styles.messageBubble,
            isUser
              ? { backgroundColor: colors.primary }
              : { backgroundColor: colors.card }
          ]}
        >
          <Text
            style={[
              styles.messageText,
              isUser ? { color: '#fff' } : { color: colors.text }
            ]}
          >
            {item.content}
          </Text>
        </View>
        {isUser && (
          <View style={[styles.avatarContainer, { backgroundColor: colors.primary + '40' }]}>
            <Ionicons name="person" size={16} color={colors.primary} />
          </View>
        )}
      </View>
    );
  };

  return (
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π JSX –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]} edges={['top']}>
      <View style={[styles.header, { backgroundColor: colors.background, borderBottomColor: colors.border }]}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Ionicons name="arrow-back" size={24} color={colors.text} />
        </TouchableOpacity>
        <View style={styles.headerTitleContainer}>
          <Text style={[styles.headerTitle, { color: colors.text }]}>
            {t('ai.title')}
          </Text>
          <Text style={[styles.headerSubtitle, { color: colors.textSecondary }]}>
            {t('ai.subtitle')}
          </Text>
        </View>
        <TouchableOpacity
          style={styles.backButton}
          onPress={clearChatHistory}
        >
          <Ionicons name="trash-outline" size={22} color={colors.text} />
        </TouchableOpacity>
      </View>

      <KeyboardAvoidingView
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 0}
      >
        <FlatList
          ref={flatListRef}
          data={messages}
          renderItem={renderMessage}
          keyExtractor={(item, index) => `${item.timestamp}-${index}`}
          contentContainerStyle={styles.messagesList}
          showsVerticalScrollIndicator={false}
          onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}
        />

        {isLoading && (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="small" color={colors.primary} />
            <Text style={[styles.loadingText, { color: colors.textSecondary }]}>
              {t('ai.thinking') || 'AI –¥—É–º–∞–µ—Ç...'}
            </Text>
          </View>
        )}

        <View style={[styles.inputContainer, { backgroundColor: colors.card, borderTopColor: colors.border }]}>
          <TextInput
            style={[styles.input, { color: colors.text, backgroundColor: colors.background }]}
            placeholder={t('ai.inputPlaceholder') || '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å...'}
            placeholderTextColor={colors.textSecondary}
            value={inputText}
            onChangeText={setInputText}
            multiline
            maxLength={500}
            editable={!isLoading}
          />
          <TouchableOpacity
            style={[
              styles.sendButton,
              { backgroundColor: inputText.trim() && !isLoading ? colors.primary : colors.border }
            ]}
            onPress={handleSend}
            disabled={!inputText.trim() || isLoading}
          >
            <Ionicons name="send" size={20} color="#fff" />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  // ... –≤—Å–µ –≤–∞—à–∏ —Å—Ç–∏–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
  backButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'flex-start',
  },
  headerTitleContainer: {
    flex: 1,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 17,
    fontWeight: '600',
  },
  headerSubtitle: {
    fontSize: 12,
    marginTop: 2,
  },
  messagesList: {
    padding: 16,
    paddingBottom: 8,
  },
  messageContainer: {
    flexDirection: 'row',
    marginBottom: 16,
    alignItems: 'flex-end',
  },
  userMessageContainer: {
    justifyContent: 'flex-end',
  },
  aiMessageContainer: {
    justifyContent: 'flex-start',
  },
  avatarContainer: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 8,
  },
  messageBubble: {
    maxWidth: '70%',
    padding: 12,
    borderRadius: 16,
  },
  messageText: {
    fontSize: 15,
    lineHeight: 20,
  },
  loadingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  loadingText: {
    marginLeft: 8,
    fontSize: 14,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    padding: 12,
    borderTopWidth: StyleSheet.hairlineWidth,
  },
  input: {
    flex: 1,
    maxHeight: 100,
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 20,
    fontSize: 15,
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
  },
});